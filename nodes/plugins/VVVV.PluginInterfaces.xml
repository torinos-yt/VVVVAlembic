<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VVVV.PluginInterfaces</name>
    </assembly>
    <members>
        <member name="T:VVVV.PluginInterfaces.V1.TSliceMode">
            <summary>
            Used in the pin creating functions of <see cref="T:VVVV.PluginInterfaces.V1.IPluginHost">IPluginHost</see> to specifiy possible SliceCounts.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TSliceMode.Single">
            <summary>
            The pin can only have one slice.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TSliceMode.Dynamic">
            <summary>
            The pin can have any number of slices.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.TComponentMode">
            <summary>
            Used to set the <see cref="P:VVVV.PluginInterfaces.V1.PluginInfo.InitialComponentMode">InitialComponentMode</see>
            in <see cref="T:VVVV.PluginInterfaces.V1.PluginInfo">IPluginInfo</see> which specifies the ComponentMode
            for a plugin when it is being created.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TComponentMode.Hidden">
            <summary>
            The plugins GUI will initially be hidden, only its node is visible.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TComponentMode.InABox">
            <summary>
            The plugins GUI will initially be showing in a box in the patch.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TComponentMode.InAWindow">
            <summary>
            The plugins GUI will initially be showing in its own window.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.TPinVisibility">
            <summary>
            Used in the pin creating functions of <see cref="T:VVVV.PluginInterfaces.V1.IPluginHost">IPluginHost</see> to specifiy the initial visibility of the pin.
            If this is not set to FALSE then the option can be changed by the user via the Inspektor.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinVisibility.False">
            <summary>
            The pin is not visible at all.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinVisibility.OnlyInspector">
            <summary>
            The pin is visible only in the Inspektor
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinVisibility.Hidden">
            <summary>
            The pin is not visible on the node, but space is reserved for it and it appears on mouseover.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinVisibility.True">
            <summary>
            Default. The pin is visible on the node.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.TPinDirection">
            <summary>
            Used to specifiy a pins Direction.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinDirection.Configuration">
            <summary>
            The pin is a ConfigurationPin and as such only accessible via the Inspektor.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinDirection.Input">
            <summary>
            The pin is an input to the node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TPinDirection.Output">
            <summary>
            The pin is an output from the node.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.TLogType">
            <summary>
            Used in the <see cref="M:VVVV.PluginInterfaces.V1.IPluginHost.Log(VVVV.PluginInterfaces.V1.TLogType,System.String)">IPluginHost.Log</see> function to specify the type of the log message.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TLogType.Debug">
            <summary>
            Specifies a debug message.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TLogType.Message">
            <summary>
            Specifies an ordinary message.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TLogType.Warning">
            <summary>
            Specifies a warning message.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TLogType.Error">
            <summary>
            Specifies an errormessage.
            </summary>
            
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.TStringType">
            <summary>
            Used to define a specific string type for pin creation
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TStringType.String">
            <summary>
            Default string pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TStringType.Filename">
            <summary>
            Filename pin type, used with the FileMask property
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TStringType.Directory">
            <summary>
            Directory pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TStringType.URL">
            <summary>
            URL pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V1.TStringType.IP">
            <summary>
            IP string type
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginBase">
            <summary>
            The one single interface a plugin has to implement
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPlugin">
            <summary>
            The one single interface a plugin has to implement
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">
            <summary>
            Called by the PluginHost to hand itself over to the plugin. This is where the plugin creates its initial pins.
            </summary>
            <param name="Host">Interface to the PluginHost.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPlugin.Configurate(VVVV.PluginInterfaces.V1.IPluginConfig)">
            <summary>
            Called by the PluginHost before the Evaluate function every frame for every ConfigurationPin that has changed. 
            The ConfigurationPin is handed over as the functions input parameter. This is where a plugin would typically 
            create/delete pins as reaction to the changed value of a ConfigurationPin that specifies the number of pins of a specific type.
            </summary>
            <param name="input">Interface to the ConfigurationPin for which the function is called.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPlugin.Evaluate(System.Int32)">
            <summary>
            Called by the PluginHost once per frame. This is where the plugin calculates and sets the SliceCounts and Values
            of its outputs depending on the values of its current inputs.
            </summary>
            <param name="SpreadMax">The maximum SliceCount of all of the plugins inputs, which would typically be used
            to adjust the SliceCounts of all outputs accordingly.</param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPlugin.AutoEvaluate">
            <summary>
            Called by the PluginHost only once during initialization to find out if this plugin needs to be evaluated
            every frame even if there is not output connected. Typically this can return FALSE as long as the plugin doesn't have
            a special reason for doing otherwise.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginConnections">
            <summary>
            Optional interface to be implemented on a plugin that needs to know when one of its pins is connected or disconnected
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginConnections.ConnectPin(VVVV.PluginInterfaces.V1.IPluginIO)">
            <summary>
            Called by the PluginHost for every input or output that is being connected. This is typically useful for 
            NodeIO Inputs that can cache a reference to the upstream interface at this place instead of getting the reference
            every frame in Evaluate.
            </summary>
            <param name="pin">Interface to the pin for which the function is called.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginConnections.DisconnectPin(VVVV.PluginInterfaces.V1.IPluginIO)">
            <summary>
            Called by the PluginHost for every input or output that is being disconnected. This is typically useful for 
            NodeIO Inputs that can set a cached reference to the upstream interface to null at this place.
            </summary>
            <param name="pin">Interface to the pin for which the function is called.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginFeedbackLoop">
            <summary>
            Optional interface to be implemented on a plugin that wants to allow feedback loops.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginFeedbackLoop.OutputRequiresInputEvaluation(VVVV.PluginInterfaces.V1.IPluginIO,VVVV.PluginInterfaces.V1.IPluginIO)">
            <summary>
            Called by the PluginHost for every input/output pair to decide whether or not the
            input needs to be evaluated before the output can be validated.
            </summary>
            <param name="inputPin">The input pin.</param>
            <param name="outputPin">The output pin.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginDXResource">
            <summary>
            Optional interface to be implemented on a plugin that deals with DirectX resources like Meshes, Textures, Layers...
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXResource.UpdateResource(VVVV.PluginInterfaces.V1.IPluginOut,SlimDX.Direct3D9.Device)">
            <summary>
            Called by the PluginHost every frame for every device. Therefore a plugin should only do 
            device specific operations here and still keep node specific calculations in the Evaluate call. 
            </summary>
            <param name="ForPin">Interface to the pin for which the function is called.</param>
            <param name="OnDevice">Pointer to the device on which the resources is to be updated.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXResource.DestroyResource(VVVV.PluginInterfaces.V1.IPluginOut,SlimDX.Direct3D9.Device,System.Boolean)">
            <summary>
            Called by the PluginHost whenever a resource for a specific pin needs to be destroyed on a specific device. 
            This is also called when the plugin is destroyed, so don't dispose dxresources in the plugins destructor/Dispose()
            </summary>
            <param name="ForPin">Interface to the pin for which the function is called.</param>
            <param name="OnDevice">Pointer to the device on which the resources is to be destroyed.</param>
            <param name="OnlyUnManaged">If True only unmanaged DirectX resources need to be destroyed.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginDXMesh">
            <summary>
            Optional interface to be implemented on a plugin that deals with DirectX Meshes
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXMesh.GetMesh(VVVV.PluginInterfaces.V1.IDXMeshOut,SlimDX.Direct3D9.Device)">
            <summary>
            Called by the PluginHost everytime a mesh is accessed via a pin on the plugin.
            This is called from the PluginHost from within DirectX BeginScene/EndScene,
            therefore the plugin shouldn't be doing much here other than handing back the right mesh.
            </summary>
            <param name="ForPin">Interface to the pin via which the mesh is accessed.</param>
            <param name="OnDevice">The device for which the mesh is accessed.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginDXTexture">
            <summary>
            Optional interface to be implemented on a plugin that deals with DirectX Textures
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXTexture.GetTexture(VVVV.PluginInterfaces.V1.IDXTextureOut,SlimDX.Direct3D9.Device)">
            <summary>
            Called by the PluginHost everytime a texture is accessed via a pin on the plugin.
            This is called from the PluginHost from within DirectX BeginScene/EndScene,
            therefore the plugin shouldn't be doing much here other than handing back the right texture.
            </summary>
            <param name="ForPin">Interface to the pin via which the texture is accessed.</param>
            <param name="OnDevice">The device for which the texture is accessed.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginDXTexture2">
            <summary>
            Same as IPluginDXTexture but with additional parameter to allow for spreadable outputs
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXTexture2.GetTexture(VVVV.PluginInterfaces.V1.IDXTextureOut,SlimDX.Direct3D9.Device,System.Int32)">
            <summary>
            Called by the PluginHost everytime a texture is accessed via a pin on the plugin.
            This is called from the PluginHost from within DirectX BeginScene/EndScene,
            therefore the plugin shouldn't be doing much here other than handing back the right texture.
            </summary>
            <param name="ForPin">Interface to the pin via which the texture is accessed.</param>
            <param name="OnDevice">The device for which the texture is accessed.</param>
            <param name="Slice">Slice Index of the texture to be accessed.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginDXLayer">
            <summary>
            Optional interface to be implemented on a plugin that deals with DirectX Layers
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.SetStates">
            <summary>
            Called by the PluginHost everytime it needs to update its StateBlock. Here the plugin
            must specify all States it will set during <see cref="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.Render(VVVV.PluginInterfaces.V1.IDXLayerIO,SlimDX.Direct3D9.Device)">IPluginDXLayer.Render</see>
            via calls to <see cref="T:VVVV.PluginInterfaces.V1.IDXRenderStateIn">IDXRenderStateIn</see>'s and <see cref="T:VVVV.PluginInterfaces.V1.IDXSamplerStateIn">IDXSamplerStateIn</see>'s functions.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.Render(VVVV.PluginInterfaces.V1.IDXLayerIO,SlimDX.Direct3D9.Device)">
            <summary>
            Called by the PluginHost everytime the plugin is supposed to render itself.
            This is called from the PluginHost from within DirectX BeginScene/EndScene,
            therefore the plugin shouldn't be doing much here other than some drawing calls.
            </summary>
            <param name="ForPin">Interface to the pin for which the function is called.</param>
            <param name="DXDevice">Device on which the plugin is supposed to render.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IAddonHost">
            <summary>
            The base interface of all addon hosts
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginHost">
            <summary>
            The interface to be implemented by a program to host IPlugins.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateValueConfig(System.String,System.Int32,System.String[],VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IValueConfig@)">
            <summary>
            Creates a ConfigurationPin of type Value.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="Dimension">The pins dimension count. Valid values: 1, 2, 3 or 4</param>
            <param name="DimensionNames">Optional. An individual suffix to the pins Dimensions.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IValueConfig interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateValueInput(System.String,System.Int32,System.String[],VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IValueIn@)">
            <summary>
            Creates an InputPin of type Value. Use this as opposed to <see cref="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateValueFastInput(System.String,System.Int32,System.String[],VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IValueFastIn@)">CreateValueFastInput</see>
            if you need to be able to ask for <see cref="P:VVVV.PluginInterfaces.V1.IPluginIn.PinIsChanged">IPluginIn.PinIsChanged</see>. May be slow with large SpreadCounts.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="Dimension">The pins dimension count. Valid values: 1, 2, 3 or 4</param>
            <param name="DimensionNames">Optional. An individual suffix to the pins Dimensions.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IValueIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateValueFastInput(System.String,System.Int32,System.String[],VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IValueFastIn@)">
            <summary>
            Creates an InputPin of type Value that does not implement <see cref="P:VVVV.PluginInterfaces.V1.IPluginIn.PinIsChanged">IPluginIn.PinIsChanged</see> and is therefore faster with large SpreadCounts.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="Dimension">The pins dimension count. Valid values: 1, 2, 3 or 4</param>
            <param name="DimensionNames">Optional. An individual suffix to the pins Dimensions.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IValueFastIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateValueOutput(System.String,System.Int32,System.String[],VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IValueOut@)">
            <summary>
            Creates an OutputPin of type Value.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="Dimension">The pins dimension count. Valid values: 1, 2, 3 or 4</param>
            <param name="DimensionNames">Optional. An individual suffix to the pins Dimensions.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IValueOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateStringConfig(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IStringConfig@)">
            <summary>
            Creates a ConfigurationPin of type String.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IStringConfig interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateStringInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IStringIn@)">
            <summary>
            Creates an InputPin of type String.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IStringIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateStringOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IStringOut@)">
            <summary>
            Creates an OutputPin of type String.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IStringIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateColorConfig(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IColorConfig@)">
            <summary>
            Creates a ConfigurationPin of type Color.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IColorConfig interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateColorInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IColorIn@)">
            <summary>
            Creates an InputPin of type Color.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IColorIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateColorOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IColorOut@)">
            <summary>
            Creates an OutputPin of type Color.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IColorOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateEnumConfig(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IEnumConfig@)">
            <summary>
            Creates a ConfigurationPin of type Enum.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IEnumConfig interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateEnumInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IEnumIn@)">
            <summary>
            Creates a InputPin of type Enum.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IEnumIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateEnumOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IEnumOut@)">
            <summary>
            Creates a OutputPin of type Enum.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IEnumOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateTransformInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.ITransformIn@)">
            <summary>
            Creates an InputPin of type Transform.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created ITransformIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateTransformOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.ITransformOut@)">
            <summary>
            Creates an OutputPin of type Transform.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created ITransformOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateRawInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IRawIn@)">
            <summary>
            Creates an InputPin of type Raw.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IRawIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateRawOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IRawOut@)">
            <summary>
            Creates an OutputPin of type Raw.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IRawOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateNodeInput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.INodeIn@)">
            <summary>
            Creates an InputPin of the generic node type.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created INodeIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateNodeOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.INodeOut@)">
            <summary>
            Creates an OutputPin of the generic node type.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created INodeIn interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateMeshOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IDXMeshOut@)">
            <summary>
            Creates an OutputPin of type DirectX Mesh.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IDXMeshIO interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateTextureOutput(System.String,VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IDXTextureOut@)">
            <summary>
            Creates an OutputPin of type DirectX Texture.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IDXTextureOut interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateLayerOutput(System.String,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IDXLayerIO@)">
            <summary>
            Creates an OutputPin of type DirectX Layer.
            </summary>
            <param name="Name">The pins name.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IDXLayerIO interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateRenderStateInput(VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IDXRenderStateIn@)">
            <summary>
            Creates an InputPin of type DirectX RenderState.
            </summary>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IDXRenderStateIO interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.CreateSamplerStateInput(VVVV.PluginInterfaces.V1.TSliceMode,VVVV.PluginInterfaces.V1.TPinVisibility,VVVV.PluginInterfaces.V1.IDXSamplerStateIn@)">
            <summary>
            Creates an InputPin of type DirectX SamplerState.
            </summary>
            <param name="SliceMode">The pins SliceMode.</param>
            <param name="Visibility">The pins initial visibility.</param>
            <param name="Pin">Pointer to the created IDXRenderStateIO interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.DeletePin(VVVV.PluginInterfaces.V1.IPluginIO)">
            <summary>
            Deletes the given pin from the plugin
            </summary>
            <param name="Pin">The pin to be deleted</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.GetCurrentTime(System.Double@)">
            <summary>
            Returns the current time which the plugin should use if it does timebased calculations.
            </summary>
            <param name="CurrentTime">The hosts current time.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.GetHostPath(System.String@)">
            <summary>
            Returns the absolut file path to the plugins host.
            </summary>
            <param name="Path">Absolut file path to the plugins host (i.e path to the patch the plugin is placed in, in vvvv).</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.GetNodePath(System.Boolean,System.String@)">
            <summary>
            Returns a slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.
            </summary>
            <param name="UseDescriptiveNames">If TRUE descriptive node names are used where available instead of the node ID.</param>
            <param name="Path">Slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.Log(VVVV.PluginInterfaces.V1.TLogType,System.String)">
            <summary>
            Allows a plugin to write messages to a console on the host (ie. Renderer (TTY) in vvvv).
            </summary>
            <param name="Type">The type of message. Depending on the setting of this parameter the PluginHost can handle messages differently.</param>
            <param name="Message">The message to be logged.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.UpdateEnum(System.String,System.String,System.String[])">
            <summary>
            Allows a plugin to create/update an Enum with vvvv
            </summary>
            <param name="EnumName">The Enums name.</param>
            <param name="Default">The Enums default value.</param>
            <param name="EnumEntries">An array of strings that specify the enums entries.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.GetEnumEntryCount(System.String,System.Int32@)">
            <summary>
            Returns the number of entries for a given Enum.
            </summary>
            <param name="EnumName">The name of the Enum to get the EntryCount of.</param>
            <param name="EntryCount">Number of entries in the Enum.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.GetEnumEntry(System.String,System.Int32,System.String@)">
            <summary>
            Returns the name of a given EnumEntry of a given Enum.
            </summary>
            <param name="EnumName">The name of the Enum to get the EntryName of.</param>
            <param name="Index">Index of the EnumEntry.</param>
            <param name="EntryName">String representation of the EnumEntry.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginHost.Evaluate">
            <summary>
            Triggers Evaluate() of the plugin - if not evaluated yet in that frame. 
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginIO">
            <summary>
            Base interface of all pin interfaces. Never used directly.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIO.Name">
            <summary>
            The pins name.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIO.Order">
            <summary>
            The order property helps the node to arrange its pins visually. The higher the order, the more right the pin appears on the node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIO.IsConnected">
            <summary>
            Specifies whether the pin is connected in the patch or not.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIO.PluginHost">
            <summary>
            Gets the plugin host which created this plugin io.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginConfig">
            <summary>
            Base interface of all ConfigurationPin interfaces. Never used directly.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginConfig.SliceCount">
            <summary>
            The pins SliceCount specifies the number of Values (2D Vector, String...) it carries. This is like the length of an array or list.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginConfig.SpreadAsString">
            <summary>
            Returns a String of the pins concatenated Values. Typcally used internally only to save a pins state to disk.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginConfig.PinIsChanged">
            <summary>
            Returns whether any slice of this pin has been changed in the current frame. This information is typically used to determine if
            further processing is needed or can be ommited.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginIn">
            <summary>
            Base interface of all InputPin interfaces. Never used directly.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginIn.Validate">
            <summary>
            Validates the upstream pin for this frame. Normally this leads to the evaluation of the upstream node.
            </summary>
            <returns>Whether or not the data changed.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIn.SliceCount">
            <summary>
            The pins SliceCount specifies the number of Values (2D Vector, String...) it carries. This is like the length of an array or list.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIn.SpreadAsString">
            <summary>
            Returns a String of the pins concatenated Values. Typcally used internally only to save a pins state to disk.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIn.PinIsChanged">
            <summary>
            Returns whether any slice of this pin has been changed in the current frame. This information is typically used to determine if
            further processing is needed or can be ommited.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginIn.AutoValidate">
            <summary>
            Gets or sets whether the upstream pin gets validated automatically before calling evaluate on the plugin.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginFastIn">
            <summary>
            Base interface of all fast InputPin interfaces. Never used directly.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IPluginFastIn.Validate">
            <summary>
            Validates the upstream pin for this frame. Normally this leads to the evaluation of the upstream node.
            </summary>
            <returns>Whether or not the data changed.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginFastIn.SliceCount">
            <summary>
            The pins SliceCount specifies the number of Values (2D Vector, String...) it carries. This is like the length of an array or list.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginFastIn.SpreadAsString">
            <summary>
            Returns a String of the pins concatenated Values. Typcally used internally only to save a pins state to disk.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginFastIn.AutoValidate">
            <summary>
            Gets or sets whether the upstream pin gets validated automatically before calling evaluate on the plugin.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginOut">
            <summary>
            Base interface of all OutputPin interfaces. Never used directly.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginOut.SliceCount">
            <summary>
            The pins SliceCount specifies the number of Values (2D Vector, String...) it carries. This is like the length of an array or list.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginOut.SpreadAsString">
            <summary>
            Returns a String of the pins concatenated Values. Typcally used internally only to save a pins state to disk.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginOut.AllowFeedback">
            <summary>
            Whether or not feedback loops are allowed on this pin.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IValueConfig">
            <summary>
            Interface to a ConfigurationPin of type Value.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetValue(System.Int32,System.Double)">
            <summary>
            Used to write a Value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Value to.</param>
            <param name="value">The Value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetValue2D(System.Int32,System.Double,System.Double)">
            <summary>
            Used to write a 2D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 2D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetValue3D(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Used to write a 3D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 3D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
            <param name="value3">The Value to write to the 3rd dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetValue4D(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Used to write a 4D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 4D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
            <param name="value3">The Value to write to the 3rd dimension.</param>
            <param name="value4">The Value to write to the 4th dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Used to write a Matrix to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Matrix to.</param>
            <param name="value">The Matrix to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetValue(System.Int32,System.Double@)">
            <summary>
            Used to retrieve a Value from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Value from.</param>
            <param name="value">The retrieved Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetValue2D(System.Int32,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 2D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 2D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetValue3D(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 3D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 3D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetValue4D(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 4D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
            <param name="value4">The retrieved 4th dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4@)">
            <summary>
            Used to retrieve a 4x4 Matrix from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4x4 Matrix from.</param>
            <param name="value">The retrieved 4x4 Matrix.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.GetValuePointer(System.Int32@,System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin.
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of values accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetSubType(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a Value pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default">The Value the pin is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetSubType2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 2D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetSubType3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 3D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueConfig.SetSubType4D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 4D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="default4">The Value the pins 4th dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IValueIn">
            <summary>
            Interface to an InputPin of type Value.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetValue(System.Int32,System.Double@)">
            <summary>
            Used to retrieve a Value from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Value from.</param>
            <param name="value">The retrieved Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetValue2D(System.Int32,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 2D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 2D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetValue3D(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 3D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 3D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetValue4D(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 4D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
            <param name="value4">The retrieved 4th dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4@)">
            <summary>
            Used to retrieve a 4x4 Matrix from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4x4 Matrix from.</param>
            <param name="value">The retrieved 4x4 Matrix.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.GetValuePointer(System.Int32@,System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin, which can be used to retrive large Spreads of Values more efficiently.
            Attention: Don't use this Pointer to write Values to the pin!
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of values accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.SetSubType(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a Value pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default">The Value the pin is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.SetSubType2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 2D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.SetSubType3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 3D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueIn.SetSubType4D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 4D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="default4">The Value the pins 4th dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IValueFastIn">
            <summary>
            Interface to a fast InputPin of type Value.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetValue(System.Int32,System.Double@)">
            <summary>
            Used to retrieve a Value from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Value from.</param>
            <param name="value">The retrieved Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetValue2D(System.Int32,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 2D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 2D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetValue3D(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 3D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 3D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetValue4D(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to retrieve a 4D Vector from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4D Vector from.</param>
            <param name="value1">The retrieved 1st dimension of the Vector.</param>
            <param name="value2">The retrieved 2nd dimension of the Vector.</param>
            <param name="value3">The retrieved 3rd dimension of the Vector.</param>
            <param name="value4">The retrieved 4th dimension of the Vector.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4@)">
            <summary>
            Used to retrieve a 4x4 Matrix from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the 4x4 Matrix from.</param>
            <param name="value">The retrieved 4x4 Matrix.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.GetValuePointer(System.Int32@,System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin, which can be used to retrive large Spreads of Values more efficiently.
            Attention: Don't use this Pointer to write Values to the pin!
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of values accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.SetSubType(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a Value pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default">The Value the pin is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.SetSubType2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 2D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.SetSubType3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 3D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueFastIn.SetSubType4D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 4D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="default4">The Value the pins 4th dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IValueOut">
            <summary>
            Interface to an OutputPin of type Value.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetValue(System.Int32,System.Double)">
            <summary>
            Used to write a Value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Value to.</param>
            <param name="value">The Value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetValue2D(System.Int32,System.Double,System.Double)">
            <summary>
            Used to write a 2D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 2D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetValue3D(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Used to write a 3D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 3D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
            <param name="value3">The Value to write to the 3rd dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetValue4D(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Used to write a 4D Vector to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the 4D Vector to.</param>
            <param name="value1">The Value to write to the 1st dimension.</param>
            <param name="value2">The Value to write to the 2nd dimension.</param>
            <param name="value3">The Value to write to the 3rd dimension.</param>
            <param name="value4">The Value to write to the 4th dimension.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Used to write a Matrix to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Matrix to.</param>
            <param name="value">The Matrix to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.GetValuePointer(System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin, which can be used to write large number of values more efficiently.
            Note though, that when writing Values to the Pointer the pins dimensions and overall SliceCount have to be taken care of manually.
            </summary>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetSubType(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a Value pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default">The Value the pin is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetSubType2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 2D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetSubType3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 3D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IValueOut.SetSubType4D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to set the SubType of a 4D Vector pin, which is a set of limitations to the pins value range, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" values on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="min">Minimum of the Values range.</param>
            <param name="max">Maximum of the Values range.</param>
            <param name="stepSize">StepSize used when scrolling the value up or down via the GUI.</param>
            <param name="default1">The Value the pins 1st dimension is initialized with and can be reset to at any time.</param>
            <param name="default2">The Value the pins 2nd dimension is initialized with and can be reset to at any time.</param>
            <param name="default3">The Value the pins 3rd dimension is initialized with and can be reset to at any time.</param>
            <param name="default4">The Value the pins 4th dimension is initialized with and can be reset to at any time.</param>
            <param name="isBang">Hint to the GUI that this Value is a bang.</param>
            <param name="isToggle">Hint to the GUI that this is a toggling Value.</param>
            <param name="isInteger">Hint to the GUI that this is an integer Value.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IStringConfig">
            <summary>
            Interface to a ConfigurationPin of type String.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringConfig.SetString(System.Int32,System.String)">
            <summary>
            Used to write a String to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the String to.</param>
            <param name="value">The String to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringConfig.GetString(System.Int32,System.String@)">
            <summary>
            Used to retrieve a String from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the String from.</param>
            <param name="value">The retrieved String.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringConfig.SetSubType(System.String,System.Boolean)">
            <summary>
            Used to set the SubType of a String pin, which is a more detailed specification of the String, used by the GUI to guide the user to insert correct Strings.
            Note though that this does not prevent a user from setting "wrong" Strings on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time.</param>
            <param name="isFilename">Hint to the GUI that this String is a filename</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringConfig.SetSubType2(System.String,System.Int32,System.String,VVVV.PluginInterfaces.V1.TStringType)">
            <summary>
            Alternative version to <see cref="M:VVVV.PluginInterfaces.V1.IStringConfig.SetSubType(System.String,System.Boolean)">IStringConfig.SetSubType()</see> with more options.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time</param>
            <param name="maxCharacters">Constrains the string to a given number of characters. Use -1 for unlimited characters</param>
            <param name="fileMask">Filemask in the form of: Audio File (*.wav, *.mp3)|*.wav;*.mp3</param>
            <param name="stringType">Enum specifying the type of string more precisely.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IStringIn">
            <summary>
            Interface to an InputPin of type String.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringIn.GetString(System.Int32,System.String@)">
            <summary>
            Used to retrieve a String from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the String from.</param>
            <param name="value">The retrieved String.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringIn.SetSubType(System.String,System.Boolean)">
            <summary>
            Used to set the SubType of a String pin, which is a more detailed specification of the String, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" Strings on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time.</param>
            <param name="isFilename">Hint to the GUI that this String is a filename</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringIn.SetSubType2(System.String,System.Int32,System.String,VVVV.PluginInterfaces.V1.TStringType)">
            <summary>
            Alternative version to <see cref="M:VVVV.PluginInterfaces.V1.IStringIn.SetSubType(System.String,System.Boolean)">IStringIn.SetSubType()</see> with more options.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time</param>
            <param name="maxCharacters">Constrains the string to a given number of characters</param>
            <param name="fileMask">Filemask in the form of: Audio File (*.wav, *.mp3)|*.wav;*.mp3</param>
            <param name="stringType">Enum specifying the type of string more precisely.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IStringOut">
            <summary>
            Interface to an OutputPin of type String.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringOut.SetString(System.Int32,System.String)">
            <summary>
            Used to write a String to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the String to.</param>
            <param name="value">The String to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringOut.SetSubType(System.String,System.Boolean)">
            <summary>
            Used to set the SubType of a String pin, which is a more detailed specification of the String, used by the GUI to guide the user to insert correct values.
            Note though that this does not prevent a user from setting "wrong" Strings on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time.</param>
            <param name="isFilename">Hint to the GUI that this String is a filename</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IStringOut.SetSubType2(System.String,System.Int32,System.String,VVVV.PluginInterfaces.V1.TStringType)">
            <summary>
            Alternative version to <see cref="M:VVVV.PluginInterfaces.V1.IStringOut.SetSubType(System.String,System.Boolean)">IStringOut.SetSubType()</see> with more options.
            </summary>
            <param name="default">The String the pin is initialized with and can be reset to at any time</param>
            <param name="maxCharacters">Constrains the string to a given number of characters</param>
            <param name="fileMask">Filemask in the form of: Audio File (*.wav, *.mp3)|*.wav;*.mp3</param>
            <param name="stringType">Enum specifying the type of string more precisely.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IColorConfig">
            <summary>
            Interface to a ConfigurationPin of type Color.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorConfig.SetColor(System.Int32,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Used to write a Color to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Color to.</param>
            <param name="color">The Color to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorConfig.GetColor(System.Int32,VVVV.Utils.VColor.RGBAColor@)">
            <summary>
            Used to retrieve a Color from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Color from.</param>
            <param name="color">The retrieved Color.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorConfig.GetColorPointer(System.Int32@,System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Colors of the pin, which can be used to retrive large Spreads of Colors more efficiently.
            Each Color consists of 4 doubles, one for each of Red, Green, Blue and Alpha.
            Attention: Don't use this Pointer to write Colors to the pin!
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of colors accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Colors Red channel double.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorConfig.SetSubType(VVVV.Utils.VColor.RGBAColor,System.Boolean)">
            <summary>
            Used to set the SubType of a Color pin, which is a more detailed specification of the Color, used by the GUI to guide the user to insert correct Colors.
            Note though that this does not prevent a user from setting "wrong" Colors on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The Color the pin is initialized with and can be reset to at any time.</param>
            <param name="hasAlpha">Hint to the GUI that this Color has an alpha channel.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IColorIn">
            <summary>
            Interface to an InputPin of type Color.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorIn.GetColor(System.Int32,VVVV.Utils.VColor.RGBAColor@)">
            <summary>
            Used to retrieve a Color from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Color from.</param>
            <param name="color">The retrieved Color.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorIn.GetColorPointer(System.Int32@,System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Colors of the pin, which can be used to retrive large Spreads of Colors more efficiently.
            Each Color consists of 4 doubles, one for each of Red, Green, Blue and Alpha.
            Attention: Don't use this Pointer to write Colors to the pin!
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of colors accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Colors Red channel double.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorIn.SetSubType(VVVV.Utils.VColor.RGBAColor,System.Boolean)">
            <summary>
            Used to set the SubType of a Color pin, which is a more detailed specification of the Color, used by the GUI to guide the user to insert correct Colors.
            Note though that this does not prevent a user from setting "wrong" Colors on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The Color the pin is initialized with and can be reset to at any time.</param>
            <param name="hasAlpha">Hint to the GUI that this Color has an alpha channel.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IColorOut">
            <summary>
            Interface to an OutputPin of type Color.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorOut.SetColor(System.Int32,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Used to write a Color to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Color to.</param>
            <param name="color">The Color to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorOut.GetColorPointer(System.Double*@)">
            <summary>
            Used to retrieve a Pointer to the Colors of the pin, which can be used to write large number of Colors more efficiently.
            Each Color consists of 4 doubles, one for each of Red, Green, Blue and Alpha.
            Note though, that when writing Colors to the Pointer the pins SliceCount has to be taken care of manually.
            </summary>
            <param name="value">A Pointer to the pins first Colors Red channel double.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IColorOut.SetSubType(VVVV.Utils.VColor.RGBAColor,System.Boolean)">
            <summary>
            Used to set the SubType of a Color pin, which is a more detailed specification of the Color, used by the GUI to guide the user to insert correct Colors.
            Note though that this does not prevent a user from setting "wrong" Colors on a pin. Ultimately each node is responsible for dealing with all possible inputs correctly.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="default">The Color the pin is initialized with and can be reset to at any time.</param>
            <param name="hasAlpha">Hint to the GUI that this Color has an alpha channel.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IEnumConfig">
            <summary>
            Interface to a ConfigurationPin of type Enum.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.SetOrd(System.Int32,System.Int32)">
            <summary>
            Used to write an Enum given as an ordinal value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Enum to.</param>
            <param name="value">The ordinal Enum value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.SetString(System.Int32,System.String)">
            <summary>
            Used to write an Enum given as an string value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Enum to.</param>
            <param name="value">The string Enum value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.GetOrd(System.Int32,System.Int32@)">
            <summary>
            Used to retrieve an Enum in ordinal form from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Enum from.</param>
            <param name="value">The retrieved Enum.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.GetString(System.Int32,System.String@)">
            <summary>
            Used to retrieve an Enum in string form from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Enum from.</param>
            <param name="value">The retrieved Enum.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.SetSubType(System.String)">
            <summary>
            Used to set the SubType of an Enum pin. Should only be called once immediately 
            after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="enumName">Name of the Enum type to set to the pin. If the given name 
            is not yet registered with vvvv a new type with this name is created. 
            Using <see cref="M:VVVV.PluginInterfaces.V1.IPluginHost.UpdateEnum(System.String,System.String,System.String[])">IPluginHost.UpdateEnum</see> 
            a newly created Enum can be filled with custom entries.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumConfig.SetDefaultEntry(System.String)">
            <summary>
            This method must be called before SetSubtype, it sets the default entry for this particular enum config pin 
            </summary>
            <param name="entryName">The exact name of the entry</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IEnumIn">
            <summary>
            Interface to an InputPin of type Enum.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumIn.GetOrd(System.Int32,System.Int32@)">
            <summary>
            Used to retrieve an Enum in ordinal form from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Enum from.</param>
            <param name="value">The retrieved Enum.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumIn.GetString(System.Int32,System.String@)">
            <summary>
            Used to retrieve an Enum in string form from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Enum from.</param>
            <param name="value">The retrieved Enum.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumIn.SetSubType(System.String)">
            <summary>
            Used to set the SubType of an Enum pin. Should only be called once immediately 
            after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="enumName">Name of the Enum type to set to the pin. If the given name 
            is not yet registered with vvvv a new type with this name is created. 
            Using <see cref="M:VVVV.PluginInterfaces.V1.IPluginHost.UpdateEnum(System.String,System.String,System.String[])">IPluginHost.UpdateEnum</see> 
            a newly created Enum can be filled with custom entries.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumIn.SetDefaultEntry(System.String)">
            <summary>
            This method must be called before SetSubtype, it sets the default entry for this particular enum pin 
            </summary>
            <param name="entryName">The exact name of the entry</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IEnumOut">
            <summary>
            Interface to an OutputPin of type Enum.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumOut.SetOrd(System.Int32,System.Int32)">
            <summary>
            Used to write an Enum given as an ordinal value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Enum to.</param>
            <param name="value">The ordinal Enum value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumOut.SetString(System.Int32,System.String)">
            <summary>
            Used to write an Enum given as an string value to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Enum to.</param>
            <param name="value">The string Enum value to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IEnumOut.SetSubType(System.String)">
            <summary>
            Used to set the SubType of an Enum pin. Should only be called once immediately 
            after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="enumName">Name of the Enum type to set to the pin. If the given name 
            is not yet registered with vvvv a new type with this name is created. 
            Using <see cref="M:VVVV.PluginInterfaces.V1.IPluginHost.UpdateEnum(System.String,System.String,System.String[])">IPluginHost.UpdateEnum</see> 
            a newly created Enum can be filled with custom entries.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.INodeIOBase">
            <summary>
            Base Interface for NodePin connections
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.INodeIn">
            <summary>
            Interface to an InputPin of the generic node type
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.GetUpsreamSlice(System.Int32,System.Int32@)">
            <summary>
            Used to retrieve the actual slice index this pin has to access on the upstream node. Note that the actual slice
            index maybe convoluted by an upstream node like GetSlice (node).
            </summary>
            <param name="slice">The slice index as seen by this pin.</param>
            <param name="upstreamSlice">The actual slice index as probably convoluted via upstream GetSlice (node).</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.GetUpstreamInterface(VVVV.PluginInterfaces.V1.INodeIOBase@)">
            <summary>
            Used to retrieve a reference of an interface offered by the upstream connected node.
            </summary>
            <param name="upstreamInterface">The retrieved interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.SetSubType(System.Guid[],System.String)">
            <summary>
            Used to set the SubType of a node pin, which is a more detailed specification of the node type via a set of Guids that identifiy the interfaces accepted on this pin.
            The SubType is used by the GUI to guide the user to make only links between pins that understand the same interfaces.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="guids">An array of Guids (typically only one) that specifies the interfaces that this input accepts.</param>
            <param name="friendlyName">A user readable name specifying the type of the node connection.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.SetSubType2(System.Type,System.Guid[],System.String)">
            <summary>
            Used to set the SubType of a node pin, which is a more detailed specification of the node type via a set of Guids that identifiy the interfaces accepted on this pin.
            The SubType is used by the GUI to guide the user to make only links between pins that understand the same interfaces.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="type">The Pins Type.</param>
            <param name="guids">An array of Guids (typically only one) that specifies the interfaces that this input accepts.</param>
            <param name="friendlyName">A user readable name specifying the type of the node connection.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.GetUpstreamInterface(System.Object@)">
            <summary>
            Used to retrieve a reference of an interface offered by the upstream connected node.
            </summary>
            <param name="upstreamInterface">The retrieved interface.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeIn.GetUpStreamSlices(System.Int32@,System.Int32*@)">
            <summary>
            Gives access to the internal Convolution Array. This was added for performance reasons. Basic functionality described at GetUpStreamSlice()
            </summary>
            <param name="sliceCount">Should always equal the slicecount of the pin.</param>
            <param name="slices"></param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.INodeIn.IsConvoluted">
            <summary>
            Added for performance reasons. If is false you may skip indexing actual slices. Obviously no GetSlice node is involved.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.INodeOut">
            <summary>
            Interface to an OutputPin of the generic node type
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeOut.SetInterface(VVVV.PluginInterfaces.V1.INodeIOBase)">
            <summary>
            Used to set the interface this
            </summary>
            <param name="theInterface"></param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeOut.SetSubType(System.Guid[],System.String)">
            <summary>
            Used to set the SubType of a node pin, which is a more detailed specification of the node type via a set of Guids that identifiy the interfaces offered on this pin.
            The SubType is used by the GUI to guide the user to make only links between pins that understand the same interfaces.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="guids">An array of Guids (typically only one) that specifies the interfaces that this output accepts.</param>
            <param name="friendlyName">A user readable name specifying the type of the node connection.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeOut.SetSubType2(System.Type,System.Guid[],System.String)">
            <summary>
            Used to set the SubType of a node pin, which is a more detailed specification of the node type via a set of Guids that identifiy the interfaces accepted on this pin.
            The SubType is used by the GUI to guide the user to make only links between pins that understand the same interfaces.
            Should only be called once immediately after the pin has been created in <see cref="M:VVVV.PluginInterfaces.V1.IPlugin.SetPluginHost(VVVV.PluginInterfaces.V1.IPluginHost)">IPlugin.SetPluginHost</see>.
            </summary>
            <param name="type">The Pins Type.</param>
            <param name="guids">An array of Guids (typically only one) that specifies the interfaces that this input accepts.</param>
            <param name="friendlyName">A user readable name specifying the type of the node connection.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeOut.MarkPinAsChanged">
            <summary>
            Used to mark this pin as being changed compared to the last frame. 
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.INodeOut.SetInterface(System.Object)">
            <summary>
            Used to set the interface this
            </summary>
            <param name="theInterface"></param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.ITransformIn">
            <summary>
            Interface to an InputPin of type Transform.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformIn.GetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4@)">
            <summary>
            Used to retrieve a Matrix from the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to retrieve the Matrix from.</param>
            <param name="value">The retrieved Matrix.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformIn.GetMatrixPointer(System.Int32@,System.Single*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin, which can be used to retrive large Spreads of Values more efficiently.
            Attention: Don't use this Pointer to write Values to the pin!
            </summary>
            <param name="sliceCount">The pins current SliceCount, specifying the number of values accessible via the Pointer.</param>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformIn.GetRenderWorldMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4@)">
            <summary>
            Used to retrieve a World Matrix from the pin at the specified slice. 
            You should call this method only from within your Render method when supporting the IPluginDXLayer interface.
            </summary>
            <param name="index">The index of the slice to retrieve the Matrix from.</param>
            <param name="value">The retrieved Matrix.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformIn.SetRenderSpace">
            <summary>
            Used to initialize rendering by letting vvvv know which transform pin controls spaces. 
            This sets view and projection matrices.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformIn.GetRenderWorldMatrix(System.Int32,SlimDX.Matrix@)">
            <summary>
            Used to retrieve a World Matrix from the pin at the specified slice. 
            You should call this method only from within your Render method when supporting the IPluginDXLayer interface.
            </summary>
            <param name="index">The index of the slice to retrieve the Matrix from.</param>
            <param name="value">The retrieved Matrix.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.ITransformOut">
            <summary>
            Interface to an OutputPin of type Transform.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformOut.SetMatrix(System.Int32,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Used to write a Matrix to the pin at the specified slice.
            </summary>
            <param name="index">The index of the slice to write the Matrix to.</param>
            <param name="value">The Matrix to write.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.ITransformOut.GetMatrixPointer(System.Single*@)">
            <summary>
            Used to retrieve a Pointer to the Values of the pin, which can be used to write large number of values more efficiently.
            Note though, that when writing Values to the Pointer the pins dimensions and overall SliceCount have to be taken care of manually.
            </summary>
            <param name="value">A Pointer to the pins first Value.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IRawOut.MarkPinAsChanged">
            <summary>
            Used to mark this pin as being changed compared to the last frame. 
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IDXMeshOut">
            <summary>
            Interface to an OutputPin of type DirectX Mesh.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXMeshOut.MarkPinAsChanged">
            <summary>
            Used to mark the mesh as being changed compared to the last frame. 
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXTextureOut.MarkPinAsChanged">
            <summary>
            Used to mark the texture as being changed compared to the last frame. 
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IDXLayerIO">
            <summary>
            Interface to an OutputPin of type DirectX Layer.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IDXStateIn">
            <summary>
            Base interface to all InputPins of type DirectX State.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXStateIn.SetSliceStates(System.Int32)">
            <summary>
            Used to set States connected to this input slicewise during the RenderLoop.
            </summary>
            <param name="index">The Index of the currently rendered slice</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IDXRenderStateIn">
            <summary>
            Interface to an InputPin of type DirectX RenderState.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXRenderStateIn.SetRenderState(SlimDX.Direct3D9.RenderState,System.Int32)">
            <summary>
            Used to set RenderStates from within <see cref="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.SetStates">IPluginDXLayer.SetStates</see>.
            </summary>
            <param name="state">The RenderState</param>
            <param name="value">The RenderStates value</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IDXSamplerStateIn">
            <summary>
            Interface to an InputPin of type DirectX SamplerState.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXSamplerStateIn.SetSamplerState(System.Int32,SlimDX.Direct3D9.SamplerState,System.Int32)">
            <summary>
             Used to set SamplerStates from within <see cref="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.SetStates">IPluginDXLayer.SetStates</see>.
            </summary>
            <param name="sampler">The sampler index to apply the SamplerState to</param>
            <param name="state">The SamplerState</param>
            <param name="value">The SamplerStates value</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V1.IDXSamplerStateIn.SetTextureStageState(System.Int32,SlimDX.Direct3D9.TextureStage,System.Int32)">
            <summary>
            Used to set TextureStageStates from within <see cref="M:VVVV.PluginInterfaces.V1.IPluginDXLayer.SetStates">IPluginDXLayer.SetStates</see>.
            </summary>
            <param name="sampler"></param>
            <param name="state"></param>
            <param name="value"></param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.IPluginInfo">
            <summary>
            Interface for the <see cref="T:VVVV.PluginInterfaces.V1.PluginInfo">PluginInfo</see>. Also see <a href="http://www.vvvv.org/tiki-index.php?page=Conventions.NodeAndPinNaming" target="_blank">VVVV Naming Conventions</a>.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Name">
            <summary>
            The nodes main visible name. Use CamelCaps and no spaces.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Category">
            <summary>
            The category in which the plugin can be found. Try to use an existing one.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Version">
            <summary>
            Optional. Leave blank if not needed to distinguish two nodes of the same name and category.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Shortcut">
            <summary>
            Optional. Shortcut to create an instance of this node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Help">
            <summary>
            Describe the nodes function in a few words.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Tags">
            <summary>
            Specify a comma separated list of tags that describe the node. Name, category and Version don't need to be duplicated here.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Author">
            <summary>
            Specify the plugins author.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Credits">
            <summary>
            Give credits to thirdparty code used.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Bugs">
            <summary>
            Specify known problems.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Warnings">
            <summary>
            Specify any usage of the node that may cause troubles.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.InitialWindowSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in window-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.InitialBoxSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in box-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.InitialComponentMode">
            <summary>
            Only for GUI plugins. Defines the nodes initial component mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Namespace">
            <summary>
            The nodes namespace. Filled out automatically, when using code as seen in the PluginTemplate.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.IPluginInfo.Class">
            <summary>
            The nodes classname. Filled out automatically, when using code as seen in the PluginTemplate.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V1.PluginInfo">
            <summary>
            Helper Class that implements the <see cref="T:VVVV.PluginInterfaces.V1.IPluginInfo">IPluginInfo</see> interface.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Name">
            <summary>
            The nodes main visible name. Use CamelCaps and no spaces.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Category">
            <summary>
            The category in which the plugin can be found. Try to use an existing one.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Version">
            <summary>
            Optional. Leave blank if not needed to distinguish two nodes of the same name and category.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Shortcut">
            <summary>
            Optional. Shortcut to create an instance of this node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Author">
            <summary>
            Specify the plugins author.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Help">
            <summary>
            Describe the nodes function in a few words.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Tags">
            <summary>
            Specify a comma separated list of tags that describe the node. Name, category and Version don't need to be duplicated here.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Bugs">
            <summary>
            Specify known problems.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Credits">
            <summary>
            Give credits to thirdparty code used.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Warnings">
            <summary>
            Specify any usage of the node that may cause troubles.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Namespace">
            <summary>
            The nodes namespace. Filled out automatically, when using code as seen in the PluginTemplate.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.Class">
            <summary>
            The nodes classname. Filled out automatically, when using code as seen in the PluginTemplate.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.InitialWindowSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in window-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.InitialBoxSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in box-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V1.PluginInfo.InitialComponentMode">
            <summary>
            Only for GUI plugins. Defines the nodes initial component mode.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IOAttribute">
            <summary>
            Common class that represents all available pin attributes.
            Note that not all properties make sense for every pin data type.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.Name">
            <summary>
            The name of this pin
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.Visibility">
            <summary>
            The visibility of the pin in the patch and inspektor.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.IsSingle">
            <summary>
            Determines whether the pin supports only one slice.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.SliceMode">
            <summary>
            Slice mode of the pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.MinValue">
            <summary>
            Minimum value for this value pin in the gui.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.MaxValue">
            <summary>
            Maximum value for this value pin in the gui.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.StepSize">
            <summary>
            Step size when dragging the value of this pin in the gui.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultValue">
            <summary>
            Default value for this value pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultValues">
            <summary>
            Array of default values for vector pins.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DimensionNames">
            <summary>
            Array of names shown in the gui for each dimension of vector pins.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.IsBang">
            <summary>
            Converts a bool pin from toggle to bang.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.IsToggle">
            <summary>
            This is used for bool pins.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultBoolean">
            <summary>
            Default value for this toggle pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.AsInt">
            <summary>
            Displays the value of this pin as an integer in the gui, regardless of the actual type.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultString">
            <summary>
            Default string for this string pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.StringType">
            <summary>
            Set a special string type for this string pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.FileMask">
            <summary>
            Filemask in the form of: "Audio File (*.wav, *.mp3)|*.wav;*.mp3".
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.MaxChars">
            <summary>
            Maximum length of the string for this pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.HasAlpha">
            <summary>
            Use alpha channel for this color pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultColor">
            <summary>
            Array of rgba values in the range [0..1] to define the default color.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.EnumName">
            <summary>
            Name of the dynamic enum, only needed for EnumEntry type.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultEnumEntry">
            <summary>
            String representation of the default enum entry for this pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.DefaultNodeValue">
            <summary>
            The default value for this node pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.IsPinGroup">
            <summary>
            Converts an ISpread&lt;ISpread&lt;T&gt;&gt; from a bin sized spread to a dynamic pin group.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.Order">
            <summary>
            The order property helps the node to arrange its pins visually. The higher the order, the more right the pin appears on the node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOAttribute.Dimension">
            <summary>
            The pins dimension count. Valid values: 1, 2, 3 or 4.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.NodeType">
            <summary>
            Used in <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">INodeInfo</see> to specify the type of the provided node.
            </summary>
            
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Native">
            <summary>
            Specifies a native node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Patch">
            <summary>
            Specifies a patch node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Module">
            <summary>
            Specifies a module node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Freeframe">
            <summary>
            Specifies a freeframe node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.VST">
            <summary>
            Specifies a VST node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Effect">
            <summary>
            Specifies an effect node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Plugin">
            <summary>
            Specifies a static plugin node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Dynamic">
            <summary>
            Specifies a dynamic plugin node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.VL">
            <summary>
            Specifies a VL node.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Text">
            <summary>
            Specifies a node with some text in it (like source code for example).
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.NodeType.Unknown">
            <summary>
            Specifies a node with an unknown type.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.WindowType">
            <summary>
            Used in the pin creating functions of <see cref="T:VVVV.PluginInterfaces.V1.IPluginHost">IPluginHost</see> to specifiy possible SliceCounts.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.WindowType.Patch">
            <summary>
            A patch editor window.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.WindowType.Module">
            <summary>
            A modules window.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.WindowType.Editor">
            <summary>
            A code editor window.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.WindowType.Renderer">
            <summary>
            A renderer window.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.WindowType.Plugin">
            <summary>
            A plugins window.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.ComponentMode">
            <summary>
            Used to set the <see cref="P:VVVV.PluginInterfaces.V1.PluginInfo.InitialComponentMode">InitialComponentMode</see>
            in <see cref="T:VVVV.PluginInterfaces.V1.PluginInfo">IPluginInfo</see> which specifies the ComponentMode
            for a plugin when it is being created.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.ComponentMode.Hidden">
            <summary>
            The plugins GUI will be hidden, only its node is visible.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.ComponentMode.InABox">
            <summary>
            The plugins GUI will be showing in a box in the patch.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.ComponentMode.InAWindow">
            <summary>
            The plugins GUI will be showing in its own window.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.ComponentMode.Fullscreen">
            <summary>
            The plugins GUI will be showing fullscreen.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.StringType">
            <summary>
            Used to define a specific string type for pin creation
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.StringType.String">
            <summary>
            Default string pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.StringType.Filename">
            <summary>
            Filename pin type, used with the FileMask property
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.StringType.Directory">
            <summary>
            Directory pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.StringType.URL">
            <summary>
            URL pin type
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.StringType.IP">
            <summary>
            IP string type
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.SliceMode">
            <summary>
            Used in the pin creating functions of <see cref="T:VVVV.PluginInterfaces.V1.IPluginHost">IPluginHost</see> to specifiy possible SliceCounts.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.SliceMode.Single">
            <summary>
            The pin can only have one slice.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.SliceMode.Dynamic">
            <summary>
            The pin can have any number of slices.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.PinVisibility">
            <summary>
            Used in the pin creating functions of <see cref="T:VVVV.PluginInterfaces.V1.IPluginHost">IPluginHost</see> to specifiy the initial visibility of the pin.
            If this is not set to FALSE then the option can be changed by the user via the Inspektor.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.PinVisibility.False">
            <summary>
            The pin is not visible at all.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.PinVisibility.OnlyInspector">
            <summary>
            The pin is visible only in the Inspektor
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.PinVisibility.Hidden">
            <summary>
            The pin is not visible on the node, but space is reserved for it and it appears on mouseover.
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.PinVisibility.True">
            <summary>
            Default. The pin is visible on the node.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.Mouse_Buttons">
            <summary>
            The MouseButtons
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Mouse_Buttons.Left">
            <summary>
            The Left MouseButton
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Mouse_Buttons.Middle">
            <summary>
            The Middle MouseButton
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Mouse_Buttons.Right">
            <summary>
            The Right MouseButton
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.Modifier_Keys">
            <summary>
            The ModifierKeys Alt, Control and Shift
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Modifier_Keys.Alt">
            <summary>
            The Alt Key
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Modifier_Keys.Control">
            <summary>
            The Control Key
            </summary>
        </member>
        <member name="F:VVVV.PluginInterfaces.V2.Modifier_Keys.Shift">
            <summary>
            The Shift MouseButton
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EnumEntry">
            <summary>
            Represents a Key/Value Pair of an enum.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates an EnumEntry from a specific enum.
            </summary>
            <param name="enumName">The enum name</param>
            <param name="index">Position in enum</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumEntry.op_Implicit(VVVV.PluginInterfaces.V2.EnumEntry)~System.String">
            <summary>
            EnumEntry can be used like a string
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumEntry.op_Implicit(VVVV.PluginInterfaces.V2.EnumEntry)~System.Int32">
            <summary>
            EnumEntry can be used like an int
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.EnumEntry.Name">
            <summary>
            The string representation of this entry.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.EnumEntry.Index">
            <summary>
            The index of this entry in the enum.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.EnumEntry.EnumName">
            <summary>
            The name of the enum to which this entry belongs.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EnumManager">
            <summary>
            Manages the global Enums of the HDEHost.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.UpdateEnum(System.String,System.String,System.String[])">
            <summary>
            Allows a plugin to create/update an Enum with vvvv
            </summary>
            <param name="enumName">The enums name.</param>
            <param name="defaultEntry">The enums default value.</param>
            <param name="enumEntries">An array of strings that specify the enums entries.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.AddEntry(System.String,System.String)">
            <summary>
            Adds an enum entry to the end of an enum. This method is quite slow,
            it copies all old entries, adds the new one and commits it back to the host.
            </summary>
            <param name="enumName">The enums name.</param>
            <param name="entryName">The new enum entry.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.AddEntry(System.String,System.String,System.Int32)">
            <summary>
            Adds an enum entry at a specific position of an enum.
            </summary>
            <param name="enumName">The enums name.</param>
            <param name="entryName">The new enum entry.</param>
            <param name="index">Position of the new entry.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.GetEnumEntryCount(System.String)">
            <summary>
            Returns the number of entries for a given Enum.
            </summary>
            <param name="enumName">The name of the Enum to get the EntryCount of.</param>
            <returns>Number of entries in the Enum.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.GetEnumEntryString(System.String,System.Int32)">
            <summary>
            Returns the name of a given EnumEntry of a given Enum.
            </summary>
            <param name="enumName">The name of the Enum to get the EntryName of.</param>
            <param name="index">Index of the EnumEntry.</param>
            <returns>String representation of the EnumEntry.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EnumManager.GetEnumEntry(System.String,System.Int32)">
            <summary>
            Returns an EnumEntry instance of a enum entry of a given Enum.
            </summary>
            <param name="enumName">The name of the Enum.</param>
            <param name="index">Index of the EnumEntry.</param>
            <returns>EnumEntry instance of the enum entry.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.MeshResource.Create``1(``0,System.Func{``0,SlimDX.Direct3D9.Device,SlimDX.Direct3D9.Mesh},System.Action{``0,SlimDX.Direct3D9.Mesh},System.Action{``0,SlimDX.Direct3D9.Mesh})">
            <summary>
            Creates a new <see cref="T:VVVV.PluginInterfaces.V2.EX9.MeshResource`1">mesh resource</see>.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
            <param name="metadata">The metadata associated with the mesh resource.</param>
            <param name="createResourceFunc">A function which creates the mesh.</param>
            <param name="updateResourceFunc">A function which updates the mesh.</param>
            <param name="destroyResourceAction">A function which destroys the mesh.</param>
            <returns>The newly created <see cref="T:VVVV.PluginInterfaces.V2.EX9.MeshResource`1">mesh resource</see>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.MeshResource.Create``1(``0,System.Func{``0,SlimDX.Direct3D9.Device,SlimDX.Direct3D9.Mesh},System.Action{``0,SlimDX.Direct3D9.Mesh},System.Action{``0,SlimDX.Direct3D9.Mesh,VVVV.PluginInterfaces.V2.DestroyReason})">
            <summary>
            Creates a new <see cref="T:VVVV.PluginInterfaces.V2.EX9.MeshResource`1">mesh resource</see>.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
            <param name="metadata">The metadata associated with the mesh resource.</param>
            <param name="createResourceFunc">A function which creates the mesh.</param>
            <param name="updateResourceFunc">A function which updates the mesh.</param>
            <param name="destroyResourceAction">A function which destroys the mesh.</param>
            <returns>The newly created <see cref="T:VVVV.PluginInterfaces.V2.EX9.MeshResource`1">mesh resource</see>.</returns>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.MeshResource`1">
            <summary>
            A resource container for meshes.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Resource`3.Metadata">
            <summary>
            Some arbitrary data associated with this resource.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Resource`3.NeedsUpdate">
            <summary>
            Whether or not the Update method has to be called for this resource.
            By default this flag is true.
            Note: The Update method will always get called for new resources.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.DeviceData">
            <summary>
            Base Class for custom data per graphics device.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.DeviceData.#ctor">
            <summary>
            Create a DeviceData instance with 'Update = true' and 'Reinitialize = false'.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.EX9.DeviceData.Update">
            <summary>
            Update the device data this frame?
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.EX9.DeviceData.Reinitialize">
            <summary>
            Recreate the device data this frame?
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.DXLayerOutPluginBase`1">
            <summary>
            Base class for plugins with layer out.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.DXResourcePluginBase`1">
            <summary>
            Base class for plugins which handle DX resources.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.DXResourcePluginBase`1.Update">
            <summary>
            Set all device data to update in this frame.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.DXResourcePluginBase`1.Reinitialize">
            <summary>
            Set all device data to reinitialize in this frame.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.DXLayerOutPluginBase`1.#ctor(VVVV.PluginInterfaces.V1.IPluginHost,System.Boolean,System.Boolean)">
            <summary>
            Constructor to create the DX pins.
            </summary>
            <param name="host">The plugin host to create the pins on.</param>
            <param name="createRenderState">Create a render state pin?</param>
            <param name="createSamplerState">Create a sampler state pin?</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.IDXDeviceService">
            <summary>
            IDXDeviceService provides access to Direct3D9 devices created by vvvv.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.TextureResource">
            <summary>
            A factory to create <see cref="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">texture resources</see>.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.TextureResource.Create``1(``0,System.Func{``0,SlimDX.Direct3D9.Device,SlimDX.Direct3D9.Texture},System.Action{``0,SlimDX.Direct3D9.Texture},System.Action{``0,SlimDX.Direct3D9.Texture})">
            <summary>
            Creates a new <see cref="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">texture resource</see>.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
            <param name="metadata">The metadata associated with the texture resource.</param>
            <param name="createResourceFunc">A function which creates the texture.</param>
            <param name="updateResourceFunc">A function which updates the texture.</param>
            <param name="destroyResourceAction">A function which destroys the texture.</param>
            <returns>The newly created <see cref="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">texture resource</see>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.EX9.TextureResource.Create``1(``0,System.Func{``0,SlimDX.Direct3D9.Device,SlimDX.Direct3D9.Texture},System.Action{``0,SlimDX.Direct3D9.Texture},System.Action{``0,SlimDX.Direct3D9.Texture,VVVV.PluginInterfaces.V2.DestroyReason})">
            <summary>
            Creates a new <see cref="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">texture resource</see>.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
            <param name="metadata">The metadata associated with the texture resource.</param>
            <param name="createResourceFunc">A function which creates the texture.</param>
            <param name="updateResourceFunc">A function which updates the texture.</param>
            <param name="destroyResourceAction">A function which destroys the texture.</param>
            <returns>The newly created <see cref="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">texture resource</see>.</returns>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.EX9.TextureResource`1">
            <summary>
            A resource container for textures.
            </summary>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.Graph.INode2.GetNodePath(System.Boolean)">
            <summary>
            Returns a slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.
            </summary>
            <param name="useDescriptiveNames">If TRUE descriptive node names are used where available instead of the node ID.</param>
            <returns>A slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.Graph.INode2.GetBounds(VVVV.PluginInterfaces.V2.BoundsType)">
            <summary>
            Returns the requested (node, box or window) bounds.
            </summary>
            <param name="boundsType">The type of bounds to be returned.</param>
            <returns></returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.INode2.InternalCOMInterf">
            <summary>
            Reference to the internal COM interface. Use with caution.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.INode2.Window">
            <summary>
            Gets the <see cref="T:VVVV.PluginInterfaces.V2.Graph.IWindow2">window</see> of this node. Or null if
            this node doesn't have a window.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.INode2.LastRuntimeError">
            <summary>
            Gets or sets the last runtime error that occured or null if there were no errors.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.INode2.Parent">
            <summary>
            Provides access to the parent node.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.Graph.IPin2.NameByParent(VVVV.PluginInterfaces.V2.Graph.INode2)">
            <summary>
            Returns the pins name as seen by the given parent node. This makes sense for pins of modules which have two parents: the IOBox and the Module.
            </summary>
            <param name="parentNode">The node for which to ask the pinname from.</param>
            <returns>The pins name.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.Graph.IPin2.ParentNodeByPatch(VVVV.PluginInterfaces.V2.Graph.INode2)">
            <summary>
            Returns the Pins parent node that lies in the give patch. This makes sense for pins of modules which have two parents: the IOBox and the Module.
            </summary>
            <param name="patch">The given patch.</param>
            <returns>The pins parent in the given patch.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.InternalCOMInterf">
            <summary>
            Reference to the internal COM interface. Use with caution.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Item(System.Int32)">
            <summary>
            Gets/Sets a string representation of the specified slice.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Spread">
            <summary>
            Gets/Sets the whole spread as a string with commaseparated slices.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.SliceCount">
            <summary>
            Returns the pins slicecount.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Type">
            <summary>
            Returns the pins datatype as a string.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.CLRType">
            <summary>
            Returns the pins clr type and null in case of native pins.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.SubType">
            <summary>
            Returns the pins subtype.
            values: guiType, dimension, default, min, max, stepSize, unitName, precision
            strings: guiType, default, fileMask, maxChars
            colors: guiType, default, hasAlpha
            enums: guiType, enumName, default
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Direction">
            <summary>
            Returns the pins direction. 
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Visibility">
            <summary>
            Gets/Sets the pins visibility. 
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.ConnectedPins">
            <summary>
            Returns a list of connected pins. For Inputs this is a maximum of one.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.Status">
            <summary>
            Returns the status of the pin.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IPin2.ParentNode">
            <summary>
            Returns the pins parent node.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.Graph.IPin2.Changed">
            <summary>
            The changed event occurs when the pins data changed.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.Graph.IPin2.SubtypeChanged">
            <summary>
            The SubtypeChanged event occurs when the pins subtype changed.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.Graph.IPin2.Connected">
            <summary>
            The connected event occurs when the pin gets connected.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.Graph.IPin2.Disconnected">
            <summary>
            The disconnected event occurs when the pin gets disconnected.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.Graph.IPin2.StatusChanged">
            <summary>
            The status changed event occurs when the pins status changed.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.InternalCOMInterf">
            <summary>
            Reference to the internal COM interface. Use with caution.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.Caption">
            <summary>
            Gets/sets the window's caption.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.WindowType">
            <summary>
            Returns the window's type.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.Node">
            <summary>
            Returns the window's associated INode2.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.IsVisible">
            <summary>
            Returns the window's visible state (true if visible, false if not).
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.Bounds">
            <summary>
            Returns the window's bounds.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.Graph.IWindow2.Handle">
            <summary>
            Returns the window's handle
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IActivatableControl">
            <summary>
            Implement this interface on your user control in order to get notified
            from vvvv when the control's parent window gets activated or deactivated.
            Useful in combination with IHDEHost.EnableShortCuts and IHDEHost.DisableShortCuts.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IAddonFactory">
            <summary>
            General addon factory
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IDiffSpread`1">
            <summary>
            Extension to the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> interface, to check if the data changes from frame to frame.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.ISpread`1">
            <summary>
            Common interface to the underlying input/output/config pins.
            Set/Get, Read/Write methods are only implemented when it makes sense.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.NonGeneric.ISpread.Item(System.Int32)">
            <summary>
            Provides random read/write access to the actual data.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.NonGeneric.ISpread.SliceCount">
            <summary>
            Get/Set the size of this spread.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.ISpread`1.Clone">
            <summary>
            Create a copy of the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <returns>A new copy of this <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.ISpread`1.Item(System.Int32)">
            <summary>
            Provides random read/write access to the actual data.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.ISpread`1.SliceCount">
            <summary>
            Get/Set the size of this spread.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.ISpread`1.Stream">
            <summary>
            Gets the stream this spread uses for reading and writing.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.NonGeneric.IDiffSpread">
            <summary>
            Extension to the non-generic <see cref="T:VVVV.PluginInterfaces.V2.NonGeneric.ISpread"/> interface, to check if the data changes from frame to frame.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.NonGeneric.IDiffSpread.Changed">
            <summary>
            Subscribe to this event to get notified when the data changes.
            </summary>
            <remarks>
            Only data from this spread is valid in an event handler.
            If you access data from another spread, don't expect it to be valid.
            </remarks>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.NonGeneric.IDiffSpread.IsChanged">
            <summary>
            Is true if the spread data has changed in this frame.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IDiffSpread`1.Changed">
            <summary>
            Subscribe to this event to get noticed when the data changes.
            </summary>
            <remarks>
            Only data from this spread is valid in an event handler.
            If you access data from another spread, don't expect it to be valid.
            </remarks>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IDiffSpread`1.IsChanged">
            <summary>
            Is true if the spread data has changed in this frame.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.INode">
            <summary>
            Gives access to vvvv nodes
            </summary>
            <remarks>Deprecated: Use <see cref="T:VVVV.PluginInterfaces.V2.Graph.INode2"/> instead.</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INode.GetID">
            <summary>
            Get the node ID.
            </summary>
            <returns>Returns this nodes ID.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INode.GetNodePath(System.Boolean)">
            <summary>
            Returns a slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.
            </summary>
            <param name="useDescriptiveNames">If TRUE descriptive node names are used where available instead of the node ID.</param>
            <returns>A slash-separated path of node IDs that uniquely identifies this node in the vvvv graph.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INode.GetNodeInfo">
            <summary>
            Get the nodes info.
            </summary>
            <returns>Returns this nodes INodeInfo.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INode.AddListener(VVVV.PluginInterfaces.V2.INodeListener)">
            <summary>
            Allows a plugin to register an INodeListener on a specific vvvv node.
            </summary>
            <param name="listener">The listener to register.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INode.RemoveListener(VVVV.PluginInterfaces.V2.INodeListener)">
            <summary>
            Allows a plugin to unregister an INodeListener from a specific vvvv node.
            </summary>
            <param name="listener">The listener to unregister.</param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INode.HasGUI">
            <summary>
            Check if the node can offer a GUI window
            </summary>
            <returns>Returns true if this node can offer a GUI window.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INode.LastRuntimeError">
            <summary>
            Gets the last runtime error that occured or null if there were no errors.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INode.Window">
            <summary>
            Gets the <see cref="T:VVVV.PluginInterfaces.V2.IWindow">window</see> of this node. Or null if
            this node doesn't have a window.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INode.Tag">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IExposedNodeService">
            <summary>
            Provides access to nodes that have been exposed for being remotely controlled
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IMainLoop">
            <summary>
            Events occur in this order:
            OnPrepareGraph
            OnUpdateView
            OnRender
            OnPresent
            OnDebug
            OnNetworkSync
            OnResetCache
            
            If PresentUpFront is true, OnPresent will be the first event.
            If this is a boygroup client, OnNetworkSync will be the last event.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IHDEHost">
            <summary>
            The interface to be implemented by a program to host IHDEPlugins.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.GetNodeFromPath(System.String)">
            <summary>
            Returns an INode2 given a slash-separated string of node IDs that uniquely identifies that node. 
            </summary>
            <param name="nodePath">A slash-separated string of node IDs.</param>
            <returns></returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.UpdateEnum(System.String,System.String,System.String[])">
            <summary>
            Allows a plugin to create/update an Enum with vvvv.
            </summary>
            <param name="enumName">The Enums name.</param>
            <param name="defaultEntry">The Enums default value.</param>
            <param name="enumEntries">An array of strings that specify the enums entries.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.GetEnumEntryCount(System.String)">
            <summary>
            Returns the number of entries for a given Enum.
            </summary>
            <param name="enumName">The name of the Enum to get the EntryCount of.</param>
            <returns>Number of entries in the Enum.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.GetEnumEntry(System.String,System.Int32)">
            <summary>
            Returns the name of a given EnumEntry of a given Enum.
            </summary>
            <param name="enumName">The name of the Enum to get the EntryName of.</param>
            <param name="index">Index of the EnumEntry.</param>
            <returns>String representation of the EnumEntry.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.GetCurrentTime">
            <summary>
            Returns the current frame time which the plugin should use if it does timebased calculations.
            </summary>
            <returns>The hosts current frame time.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.SetRealTime(System.Double)">
            <summary>
            Initialize the internal realtime clock to a specific value
            </summary>
            <param name="time">New time value</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.Open(System.String,System.Boolean,VVVV.PluginInterfaces.V2.IWindow)">
            <summary>
            Opens the given file.
            </summary>
            <param name="file">The file to open by vvvv.</param>
            <param name="inActivePatch">Whether it should be openend in the active patch or in the root patch.</param>
            <param name="window">If the created node has a GUI it will tabbed with this window.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.SetComponentMode(VVVV.PluginInterfaces.V2.Graph.INode2,VVVV.PluginInterfaces.V2.ComponentMode)">
            <summary>
            Sets the component mode of the given nodes associated GUI.
            </summary>
            <param name="node">The node whose GUIs ComponentMode is to be changed.</param>
            <param name="componentMode">The new ComponentMode.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.GetXMLSnippetFromSelection">
            <summary>
            Gives access to the XML-snippet describing the current selection in the active patch. 
            </summary>
            <returns>An XML-message snippet describing the currently selected nodes in the active patch.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.SendXMLSnippet(System.String,System.String,System.Boolean)">
            <summary>
            Allows sending of XML-message snippets to patches. 
            </summary>
            <param name="fileName">Filename of the patch to send the message to.</param>
            <param name="message">The XML-message snippet.</param>
            <param name="undoable">If TRUE the operation performed by this message can be undone by the user using the UNDO command.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.SelectNodes(VVVV.PluginInterfaces.V2.Graph.INode2[])">
            <summary>
            Selects the given nodes in their patch.
            </summary>
            <param name="nodes">The nodes to be selected.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.ShowEditor(VVVV.PluginInterfaces.V2.Graph.INode2)">
            <summary>
            Opens the editor of the given node.
            </summary>
            <param name="node">The node whose editor to open.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.ShowGUI(VVVV.PluginInterfaces.V2.Graph.INode2)">
            <summary>
            Opens the GUI of the given node.
            </summary>
            <param name="node">The node whose GUI to open.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.ShowHelpPatch(VVVV.PluginInterfaces.V2.INodeInfo)">
            <summary>
            Opens the help-patch of the given nodeinfo.
            </summary>
            <param name="nodeInfo">The nodeinfo to open the help-patch for.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.ShowNodeReference(VVVV.PluginInterfaces.V2.INodeInfo)">
            <summary>
            Opens the online-reference page on vvvv.org for the given nodeinfo.
            </summary>
            <param name="nodeInfo">The nodeinfo to show the online-reference for.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.DisableShortCuts">
            <summary>
            Disables the short cuts of vvvv. Each disable call needs to be followed by an enable call.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IHDEHost.EnableShortCuts">
            <summary>
            Enables the short cuts of vvvv.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.Root">
            <summary>
            Returns an interface to the graphs root node.
            </summary>
            <remarks>Deprecated: Use RootNode instead.</remarks>
            <returns>The graphs root node.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.RootNode">
            <summary>
            Returns an interface to the graphs root node.
            </summary>
            <returns>The graphs root node.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.ActivePatchWindow">
            <summary>
            The currently selected patch window.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.FrameTime">
            <summary>
            The current host frame time which the plugin should use if it does timebased calculations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.RealTime">
            <summary>
            The realtime in seconds since the IHDEHost was created. On boygroup clients this ist the time 
            since the server IHDEHost was created, synced over network. This time is not frame based,
            each call will return a new time.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.AddonFactories">
            <summary>
            The addon factories used to collect node infos and create nodes.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.ExePath">
            <summary>
            Gets the full path to the vvvv.exe.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.DeviceService">
            <summary>
            Provides access to Direct3D9 devices created by vvvv.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.MainLoop">
            <summary>
            Gets the main loop, which exposes events from the main loop.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.ExposedNodeService">
            <summary>
            Provides access to nodes that have been exposed for being remotely controlled
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.IsBoygroupClient">
            <summary>
            Indicates whether this IHDEHost is a client in a boygroup.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.BoygroupServerIP">
            <summary>
            The IP adress of the boygroup server.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.IsRunningInBackground">
            <summary>
            Whether or not vvvv is running in background.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.IsBlackBoxMode">
            <summary>
            Indicates whether this IHDEHost is running in encypted mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IHDEHost.FiftyEditor">
            <summary>
            Reference to the 50 Editor
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.INodeBrowser">
            <summary>
            Allows the NodeBrower to be contacted by the host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.INodeBrowserHost">
            <summary>
            Allows the NodeBrower to communicate back to the host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IWindowSwitcher">
            <summary>
            Allows the WindowSwitcher to be contacted by the host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IWindowSwitcherHost">
            <summary>
            Allows the WindowSwitcher to communicate back to the host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IKommunikator">
            <summary>
            Allows the Kommunikator to be contacted by the host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IKommunikatorHost">
            <summary>
            Allows the Kommunikator to communicate back to its host
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IPin">
            <summary>
            Gives access to a vvvv nodes pins
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IPin.AddListener(VVVV.PluginInterfaces.V2.IPinListener)">
            <summary>
            Allows a plugin to register an IPinListener on a specific pin.
            </summary>
            <param name="listener">The listener to register.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IPin.RemoveListener(VVVV.PluginInterfaces.V2.IPinListener)">
            <summary>
            Allows a plugin to unregister an IPinListener from a specific pin.
            </summary>
            <param name="listener">The listener to unregister.</param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IPin.Tag">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IWindow">
            <summary>
            Gives access to vvvv windows
            </summary>
            /// <remarks>Deprecated: Use <see cref="T:VVVV.PluginInterfaces.V2.Graph.IWindow2"/> instead.</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IWindow.GetWindowType">
            <summary>
            Get the windows type.
            </summary>
            <returns>Returns this windows type.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IWindow.GetNode">
            <summary>
            Get the windows associated INode
            </summary>
            <returns>Returns this windows INode</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IWindow.IsVisible">
            <summary>
            Get the windows visible state
            </summary>
            <returns>Returns true if this window is visible, false if not.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IWindow.Caption">
            <summary>
            Get/set the windows caption.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IEditor">
            <summary>
            Interface for all document editors. Use in combination with the
            <see cref="T:VVVV.PluginInterfaces.V2.EditorInfoAttribute">EditorInfoAttribute</see> 
            to define with which file extensions this editor works with.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IEditor.Open(System.String)">
            <summary>
            Informs the editor to open a file located at filename.
            </summary>
            <param name="filename">The path to the file to open.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IEditor.MoveTo(System.Int32,System.Int32)">
            <summary>
            Informs the editor to move to the line number lineNumber.
            <param name="lineNumber">The line number to move to.</param>
            <param name="column">The column number to move to.</param>
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IEditor.Close">
            <summary>
            Informs the editor to close the currently opened file.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IEditor.Save">
            <summary>
            Tells the editor to save the currently opened file.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IEditor.SaveAs(System.String)">
            <summary>
            Tells the editor to save the currently opened file under 
            the new filename.
            </summary>
            <param name="filename">The new path to save the currently opened file to.</param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IEditor.OpenedFile">
            <summary>
            The absolute path to file currently opened.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.INodeInfoFactory">
            <summary>
            Factory to create a <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">nodeInfo</see>.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfoFactory.CreateNodeInfo(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node info</see>.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="category">The category of the node.</param>
            <param name="version">The version of the node.</param>
            <param name="filename">The absolute path to source file which contains this <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node info</see>.</param>
            <param name="beginUpdate">Whether the NodeInfoAdded event should be supressed till CommitUpdate on node info is called.</param>
            <returns>The newly created <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node info</see>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfoFactory.UpdateNodeInfo(VVVV.PluginInterfaces.V2.INodeInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the key of an existing <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node info</see>.
            </summary>
            <param name="nodeInfo">The node info to update.</param>
            <param name="name">The new name.</param>
            <param name="category">The new category.</param>
            <param name="version">The new version.</param>
            <param name="filename">The new absolute path to source file which contains this <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node info</see>.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfoFactory.DestroyNodeInfo(VVVV.PluginInterfaces.V2.INodeInfo)">
            <summary>
            Destroy given node info.
            </summary>
            <param name="nodeInfo">The node info to destroy.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfoFactory.ContainsKey(System.String,System.String,System.String,System.String)">
            <summary>
            Determines whether a node info with given key already exists.
            </summary>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="version">The version.</param>
            <param name="filename">The filename.</param>
            <returns>True if node info with given key already exists, otherwise false.</returns>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfoFactory.NodeInfos">
            <summary>
            Array of all registered <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">node infos</see>.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfoFactory.Timestamp">
            <summary>
            Gets the current timestamp. The timestamp increases everytime a nodeinfo gets added, removed or updated.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.BinSize">
            <summary>
            The bin size used in ISpread&lt;ISpread&lt;T&gt;&gt; implementations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.BinName">
            <summary>
            The bin name used in ISpread&lt;ISpread&lt;T&gt;&gt; implementations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.BinVisibility">
            <summary>
            The visibility of the bin size pin in the patch and inspektor.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.BinOrder">
            <summary>
            The position of the bin size used in ISpread&lt;ISpread&lt;T&gt;&gt; implementations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.AutoValidate">
            <summary>
            Whether the pin is being validated on Evaluate or not.
            Validation triggers upstream node evaluation if upstream node was not
            evaluated yet in this frame.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.InputAttribute.CheckIfChanged">
            <summary>
            Whether or not vvvv should check if the data changed from previous frame.
            This is by default disabled for numeric data as their spread counts are
            typically high and doing this check might have a negative impact on
            performance.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IIOFactory">
            <summary>
            An io factory provides methods to create io containers.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IIOFactory.CreateIOContainer(VVVV.PluginInterfaces.V2.IOBuildContext)">
            <summary>
            Creates a new IO container as described by the build context.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IIOFactory.CanCreateIOContainer(VVVV.PluginInterfaces.V2.IOBuildContext)">
            <summary>
            Whether or not an IO container can be created for the given build context.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IIOFactory.PluginHost">
            <summary>
            The plugin host used to create all native interfaces.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Synchronizing">
            <summary>
            The Synchronizing event takes place before the plugin gets evaluated.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Flushing">
            <summary>
            The Flushing event takes place after the plugin has been evaluated.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Configuring">
            <summary>
            The Configuring event takes place after a user changed a config pin.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Connected">
            <summary>
            The Connected event takes place after a pin has been connected.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Disconnected">
            <summary>
            The Disconnected event takes place after a pin has been disconnected.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Created">
            <summary>
            The Created event takes place after the plugin has been created.
            </summary>
        </member>
        <member name="E:VVVV.PluginInterfaces.V2.IIOFactory.Disposing">
            <summary>
            The Disposing event takes place before the plugin is being disposed.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IIOContainer">
            <summary>
            IO containers are used by the IO registry and IO factory to create and
            destroy all different types of in- and output classes like for example
            spreads and streams. Each of those classes are wrapped by an IO container
            in order to have one common interface to deal with in the registration
            process and to relieve those classes from additional dependencies to
            the plugin interface.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IIOContainer.RawIOObject">
            <summary>
            Gets the io object this container holds on to.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IIOContainer.BaseContainer">
            <summary>
            Gets the base io container, whose io object is used by the
            io object this container holds on to.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IIOContainer.Factory">
            <summary>
            Gets the io factory which was used to create this container.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IIOContainer`1.IOObject">
            <summary>
            Gets the io object this container holds on to.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IOContainerExtensions.GetPluginIO(VVVV.PluginInterfaces.V2.IIOContainer)">
            <summary>
            Returns the native plugin io interface if any.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IIORegistry">
            <summary>
            The IO registry is the central place to register new io classes,
            like spreads or streams. It's instantiated only once on startup
            of vvvv and is used by IO factories to do their work. IO factories
            are instantiated per plugin.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IIORegistry.Register(VVVV.PluginInterfaces.V2.IIORegistry,System.Boolean)">
            <summary>
            Register a new IO registry which will be used by IO factories
            to lookup and create custom IO classes.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IIORegistry.CanCreate(VVVV.PluginInterfaces.V2.IOBuildContext)">
            <summary>
            Whether or not this registry can create the IO class as described
            by the IO context.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IIORegistry.CreateIOContainer(VVVV.PluginInterfaces.V2.IIOFactory,VVVV.PluginInterfaces.V2.IOBuildContext)">
            <summary>
            Creates a new IO container as described by the build context.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IOBuildContext">
            <summary>
            An io build context is used during the build process of an io object.
            It contains all the necessary information of how to configure
            an io object and its container object when creating it.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOBuildContext.IOAttribute">
            <summary>
            Gets the io attribute.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOBuildContext.IOType">
            <summary>
            Gets the type of the io object to build.
            For example: ISpread{double} or IValueIn.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOBuildContext.DataType">
            <summary>
            Gets the data type which the io object should handle.
            For example: double or T.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOBuildContext.SubscribeToIOEvents">
            <summary>
            Gets whether or not the io container should subscribe
            to the sync, flush and dispose events of the io factory.
            In most cases only the outer most container will subscribe
            to those events as its containing io object will trigger
            the sync and flush methods of its inner io objects manually.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.IOBuildContext`1.IOAttribute">
            <summary>
            Gets or sets the io attribute.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IPluginContainer">
            <summary>
            Used when a plugin use a small holder to another one
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IPluginEvaluate">
            <summary>
            Basic interface to provide a plugin with an Evaluate function.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IPluginEvaluate.Evaluate(System.Int32)">
            <summary>
            Called by the PluginHost once per frame. This is where the plugin calculates and sets the SliceCounts and Values
            of its outputs depending on the values of its current inputs.
            </summary>
            <param name="SpreadMax">The maximum SliceCount of all of the plugins inputs, which would typically be used
            to adjust the SliceCounts of all outputs accordingly.</param>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IQueryDelete">
            <summary>
            Optional interface to provide a plugin with the possibility to prohibit its own deletion.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IQueryDelete.DeleteMe">
            <summary>
            Called by the PluginHost when the plugin is about to be deleted. The plugin can return FALSE to prohibit the deletion. 
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IUserInputWindow">
            <summary>
            Implement this interface on your gui-plugin if the Mouse (System Window)
            or Keyboard (System Window) nodes should output data for it.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IBackgroundColor">
            <summary>
            Implement this interface on your gui-plugin to specify an initial background color.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.IStartable">
            <summary>
            Interface to allow some code to be executed on startup.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IStartable.Start">
            <summary>
            Code to execute once library is loaded.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.IStartable.Shutdown">
            <summary>
            Code to execute when vvvv quits.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.NodeCollection">
            <summary>
            Description of NodeCollection.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.INodeInfo">
            <summary>
            Interface for the <see cref="T:VVVV.PluginInterfaces.V2.INodeInfo">INodeInfo</see>. Also see <a href="http://www.vvvv.org/tiki-index.php?page=Conventions.NodeAndPinNaming" target="_blank">VVVV Naming Conventions</a>.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfo.BeginUpdate">
            <summary>
            Disables events. Call this function if bunch of properties will get changed.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.INodeInfo.CommitUpdate">
            <summary>
            Enables events. Call this function after a BeginUpdate(). Will trigger a NodeInfoUpdated event.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Name">
            <summary>
            The nodes main visible name. Use CamelCaps and no spaces.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Category">
            <summary>
            The category in which the plugin can be found. Try to use an existing one.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Version">
            <summary>
            Optional. Leave blank if not needed to distinguish two nodes of the same name and category.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Shortcut">
            <summary>
            Optional. Shortcut to create an instance of this node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Help">
            <summary>
            Describe the nodes function in a few words.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Tags">
            <summary>
            Specify a comma separated list of tags that describe the node. Name, category and Version don't need to be duplicated here.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Author">
            <summary>
            Specify the plugins author.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Credits">
            <summary>
            Give credits to thirdparty code used.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Bugs">
            <summary>
            Specify known problems.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Warnings">
            <summary>
            Specify any usage of the node that may cause troubles.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.InitialWindowSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in window-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.InitialBoxSize">
            <summary>
            Only for GUI plugins. Defines the nodes initial size in box-mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.InitialComponentMode">
            <summary>
            Only for GUI plugins. Defines the nodes initial component mode.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Arguments">
            <summary>
            Arguments used by the IAddonFactory to create this node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Filename">
            <summary>
            Name of the file used by the IAddonFactory to create this node.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Username">
            <summary>
            The nodes unique username in the form of: Name (Category Version) where the Name can be a symbol
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Systemname">
            <summary>
            The nodes unique systemname in the form of: Name (Category Version)
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Type">
            <summary>
            The node type. Set by the PluginFactory.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.UserData">
            <summary>
            Arbritary user data. Can be used by factories to store additional data.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Factory">
            <summary>
            The factory which created this node info.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.AutoEvaluate">
            <summary>
            Define if this node should be evaluated every frame, even if no output is read.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.INodeInfo.Ignore">
            <summary>
            Define if this node should be ignored in a NodeBrowser or not.
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.ToString``1(VVVV.PluginInterfaces.V2.ISpread{``0})">
            <summary>
            Converts a <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to a <see cref="T:System.String"/> of comma seperated values.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to convert to a <see cref="T:System.String"/>.</param>
            <returns>A comma seperated <see cref="T:System.String"/> of <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.AsString``1(VVVV.PluginInterfaces.V2.ISpread{``0})">
            <summary>
            Converts a <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to a <see cref="T:System.String"/> of comma seperated values.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to convert to a <see cref="T:System.String"/>.</param>
            <returns>A comma seperated <see cref="T:System.String"/> of <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.CombineSpreads(System.Int32,System.Int32)">
            <summary>
            Used to calculate the slice count if two spreads need to be
            iterated.
            </summary>
            <param name="c1">Slice count 1.</param>
            <param name="c2">Slice count 2.</param>
            <returns>
            Maximum of c1 and c2 if c1 greater 0 and c2 greater 0;
            otherwise, 0.
            </returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.CombineWith``1(System.Int32,VVVV.PluginInterfaces.V2.ISpread{``0})">
            <summary>
            <see cref="M:VVVV.PluginInterfaces.V2.SpreadExtensions.CombineSpreads(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.CombineWith``2(VVVV.PluginInterfaces.V2.ISpread{``0},VVVV.PluginInterfaces.V2.ISpread{``1})">
            <summary>
            <see cref="M:VVVV.PluginInterfaces.V2.SpreadExtensions.CombineSpreads(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.AssignFrom``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Copy all values from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to this <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to copy to.</param>
            <param name="enumerable">The IEnumerable{T} to copy from.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.AssignFrom``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Copy all values from <see cref="T:System.Collections.Generic.IList`1"/> to this <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to copy to.</param>
            <param name="list">The IList{T} to copy from.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.Add``1(VVVV.PluginInterfaces.V2.ISpread{``0},``0)">
            <summary>
            Adds an item to the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to add the object to.</param>
            <param name="item">The object to add.</param>
            <remarks>This is operation has a runtime of O(1).</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.AddRange``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified enumerable to the end of the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to add the elements to.</param>
            <param name="enumerable">The elements to be added.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.AddRange``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds the elements of the specified list to the end of the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to add the elements to.</param>
            <param name="list">The elements to be added.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.Remove``1(VVVV.PluginInterfaces.V2.ISpread{``0},``0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to remove the object from.</param>
            <param name="item">The object to remove.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>; otherwise, false.
            This method also returns false if item is not found in the original <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </returns>
            <remarks>This is operation has a runtime of O(n).</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.RemoveAt``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to remove the element from.</param>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks><paramref name="index"/> can be negative or greater SliceCount.</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.RemoveAll``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Predicate{``0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to remove the objects from.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.RemoveRange``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to remove the elements from.</param>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <remarks>The items are removed and all the elements following them in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> have their indexes reduced by count.</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.GetRange``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to get the elements from.</param>
            <param name="index">The zero-based <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.IndexOf``1(VVVV.PluginInterfaces.V2.ISpread{``0},``0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to use to locate the item.</param>
            <param name="item">The object to locate in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</param>
            <returns>The index of item if found in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>; otherwise, -1.</returns>
            <remarks>If an object occurs multiple times in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>, the IndexOf method always returns the first instance found.</remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.Insert``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Int32,``0)">
            <summary>
            Inserts an item to the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> at the specified index.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to insert the item into.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</param>
            <remarks>
            If index equals the number of items in the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>, then item is appended to the spread.
            </remarks>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.InsertRange``1(VVVV.PluginInterfaces.V2.ISpread{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> at the specified index.
            </summary>
            <param name="spread">The <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/> to insert the items into.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:VVVV.PluginInterfaces.V2.ISpread`1"/>.</param>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.GetMaxSliceCount``1(VVVV.PluginInterfaces.V2.ISpread{VVVV.PluginInterfaces.V2.ISpread{``0}})">
            <summary>
            Returns the max slice count of all spreads or zero if one of the slice counts is zero.
            </summary>
            <param name="spreads">A spread of spreads for which to return the max slice count.</param>
            <returns>The max slice count of all spreads.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.GetSliceCountSum``1(VVVV.PluginInterfaces.V2.ISpread{VVVV.PluginInterfaces.V2.ISpread{``0}})">
            <summary>
            Returns the sum of all slice counts of the given spreads.
            </summary>
            <param name="spreads">A spread of spreads for which to return the slice count sum.</param>
            <returns>The sum of all slice counts.</returns>
        </member>
        <member name="M:VVVV.PluginInterfaces.V2.SpreadExtensions.SetSliceCountBy``1(VVVV.PluginInterfaces.V2.ISpread{``0},VVVV.PluginInterfaces.V2.ISpread{VVVV.PluginInterfaces.V2.ISpread{``0}})">
            <summary>
            Takes the max slice count of the input spreads, multiplies it with the slice count of the
            outer spread and assigns it to the output spread.
            </summary>
            <param name="outputSpread">The spread to set the slice count on.</param>
            <param name="inputSpreads">The spread of spreads to use for the slice count computation.</param>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.OutputAttribute.BinName">
            <summary>
            The bin name used in ISpread&lt;ISpread&lt;T&gt;&gt; implementations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.OutputAttribute.BinVisibility">
            <summary>
            The visibility of the bin size pin in the patch and inspektor.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.OutputAttribute.BinOrder">
            <summary>
            The position of the bin size used in ISpread&lt;ISpread&lt;T&gt;&gt; implementations.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.OutputAttribute.AutoFlush">
            <summary>
            Whether the pin is flushed after Evaluate or not.
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.OutputAttribute.AllowFeedback">
            <summary>
            Whether or not feedback loops are allowed on this pin.
            By default disabled.
            </summary>
        </member>
        <member name="T:VVVV.PluginInterfaces.V2.Spread`1">
            <summary>
            The spread data type
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.PluginInfoAttribute.Systemname">
            <summary>
            The nodes unique username in the form of: Name (Category Version)
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.StartableAttribute.Name">
            <summary>
            Friendly name for Startable Elements
            </summary>
        </member>
        <member name="P:VVVV.PluginInterfaces.V2.StartableAttribute.Lazy">
            <summary>
            If Lazy, it will only start when assemly loads, 
            otherwise it will force assmebly to load on startup
            </summary>
        </member>
    </members>
</doc>
