<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VVVV.Utils</name>
    </assembly>
    <members>
        <member name="M:VVVV.Utils.Algorithm.ConvexHull.CounterClockWise(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Three points are a counter-clockwise turn if ccw &gt; 0, clockwise if
            ccw &lt; 0, and collinear if ccw = 0 because ccw is a determinant that
            gives the signed area of the triangle formed by p1, p2 and p3.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Algorithm.ConvexHull.CreateConvexHull(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Generates list of convex hull points from the given list of points using Graham's scan
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:VVVV.Utils.Animation.IIRFilter">
            <summary>
            Basic 1-pole IIR filter with threshold.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Animation.IIRFilter.Update(System.Double)">
            <summary>
            Update filter state. If the difference between 
            the current filter value and the new value is greater than 
            the threshold then filter value is set to new value.
            </summary>
            <param name="newValue">Target value</param>
            <returns>Filtered target value</returns>
        </member>
        <member name="T:VVVV.Utils.Animation.LowpassFilter">
            <summary>
            One pole IIR filter
            </summary>
        </member>
        <member name="M:VVVV.Utils.Animation.LowpassFilter.#ctor">
            <summary>
            Initialize the filter
            </summary>
        </member>
        <member name="M:VVVV.Utils.Animation.LowpassFilter.Filter(System.Double,System.Double)">
            <summary>
            Gets the next filter value, applies <c>alpha * value + (1 - alpha) * lastValue</c>
            </summary>
            <param name="value"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="P:VVVV.Utils.Animation.LowpassFilter.Last">
            <summary>
            Last filter value
            </summary>
        </member>
        <member name="T:VVVV.Utils.Animation.OneEuroFilter">
            <summary>
            Adaptive noise filter via http://www.lifl.fr/~casiez/1euro/OneEuroFilter.cs
            See http://www.lifl.fr/~casiez/1euro
            </summary>
        </member>
        <member name="T:VVVV.Utils.Animation.Particle">
            <summary>
            A particle class with common data fields.
            The Update method is virtual, so it can be overwritten in sub classes.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Animation.Particle.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new Particle instance and sets the time.
            </summary>
            <param name="time">Current system time in seconds.</param>
            <param name="lifeTime">Max life time in seconds, -1 is infinite lifetime</param>
        </member>
        <member name="M:VVVV.Utils.Animation.Particle.UpdateTime(System.Double)">
            <summary>
            Updates the time variables dt and age.
            </summary>
            <param name="time">Current system time in seconds</param>
        </member>
        <member name="M:VVVV.Utils.Animation.Particle.Update(System.Double)">
            <summary>
            Updates the paticle age and position.
            </summary>
            <param name="time">Current system time in seconds.</param>
            <returns>False if the particle is dead.</returns>
        </member>
        <member name="T:VVVV.Utils.Application.AppInfo">
            <summary>
            provides information about the entry assembly
            </summary>
        </member>
        <member name="M:VVVV.Utils.Collections.IListExtensions.ClampedElementAtIfNotEmpty``1(System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
            throws if input is empty. so please check that first
            </summary>
        </member>
        <member name="M:VVVV.Utils.Collections.IListExtensions.ClampedElementAtOrDefault``1(System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
            if count = 0 returns a default(T)
            </summary>
        </member>
        <member name="P:VVVV.Utils.IO.Mouse.PressedButtons">
            <summary>
            The currently pressed mouse buttons.
            </summary>
        </member>
        <member name="T:Microsoft.Threading.SingleThreadSynchronizationContext">
            <summary>Provides a SynchronizationContext that's single-threaded.</summary>
            <remarks>See http://blogs.msdn.com/b/pfxteam/archive/2012/01/20/10259049.aspx </remarks>
        </member>
        <member name="F:Microsoft.Threading.SingleThreadSynchronizationContext.m_queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="F:Microsoft.Threading.SingleThreadSynchronizationContext.m_thread">
            <summary>The processing thread.</summary>
        </member>
        <member name="M:Microsoft.Threading.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Microsoft.Threading.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>Runs a loop to process all queued work items.</summary>
        </member>
        <member name="M:Microsoft.Threading.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="F:VVVV.Utils.OSC.OscTimeTag.Epoch">
            <summary>
            Osc Time Epoch (January 1, 1900 00:00:00).
            </summary>
        </member>
        <member name="F:VVVV.Utils.OSC.OscTimeTag.MinValue">
            <summary>
            Minimum Osc Time Tag.
            </summary>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> class.
            </summary>
            <remarks>Defaults the Osc Time Tag value to DateTime.Now.</remarks>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> class.
            </summary>
            <param name="timeStamp">The time stamp to use to set the Osc Time Tag.</param>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> class.
            </summary>
            <param name="data">The time stamp to use to set the Osc Time Tag.</param>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.ToByteArray">
            <summary>
            Convert the Osc Time Tag to a byte array.
            </summary>
            <returns>A byte array containing the Osc Time Tag.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.Equals(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether two specified instances of OscTimeTag are equal.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs and rhs represent the same time tag; otherwise, false.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_Equality(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether two specified instances of OscTimeTag are equal.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs and rhs represent the same time tag; otherwise, false.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_Inequality(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether two specified instances of OscTimeTag are not equal.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs and rhs do not represent the same time tag; otherwise, false.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_LessThan(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether one specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> is less than another specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/>.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs is less than rhs; otherwise, false.</returns>        
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_LessThanOrEqual(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether one specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> is less than or equal to another specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/>.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs is less than or equal to rhs; otherwise, false.</returns>        
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_GreaterThan(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether one specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> is greater than another specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/>.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs is greater than rhs; otherwise, false.</returns>        
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.op_GreaterThanOrEqual(VVVV.Utils.OSC.OscTimeTag,VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Determines whether one specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> is greater than or equal to another specified <see cref="T:VVVV.Utils.OSC.OscTimeTag"/>.
            </summary>
            <param name="lhs">An OscTimeTag.</param>
            <param name="rhs">An OscTimeTag.</param>
            <returns>true if lhs is greater than or equal to rhs; otherwise, false.</returns>        
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.IsValidTime(System.DateTime)">
            <summary>
            Validates the time stamp for use in an Osc Time Tag.
            </summary>
            <param name="timeStamp">The time stamp to validate.</param>
            <returns>True if the time stamp is a valid Osc Time Tag; false, otherwise.</returns>
            <remarks>Time stamps must be greater-than-or-equal to <see cref="F:VVVV.Utils.OSC.OscTimeTag.MinValue"/>.</remarks>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.Set(System.DateTime)">
            <summary>
            Sets the value of the Osc Time Tag.
            </summary>
            <param name="timeStamp">The time stamp to use to set the Osc Time Tag.</param>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>true if value is an instance of System.DateTime and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.Equals(VVVV.Utils.OSC.OscTimeTag)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified OscTimeTag instance.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>true if value is an instance of System.DateTime and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:VVVV.Utils.OSC.OscTimeTag.ToString">
            <summary>
            Converts the value of the current <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> object to its equivalent string representation.
            </summary>
            <returns>A string representation of the value of the current <see cref="T:VVVV.Utils.OSC.OscTimeTag"/> object.</returns>
        </member>
        <member name="P:VVVV.Utils.OSC.OscTimeTag.SecondsSinceEpoch">
            <summary>
            Gets the first 32 bits of the Osc Time Tag. Specifies the number of seconds since the epoch.
            </summary>
        </member>
        <member name="P:VVVV.Utils.OSC.OscTimeTag.FractionalSecond">
            <summary>
            Gets the last 32 bits of the Osc Time Tag. Specifies the fractional part of a second.
            </summary>
        </member>
        <member name="P:VVVV.Utils.OSC.OscTimeTag.DateTime">
            <summary>
            Gets the Osc Time Tag as a DateTime value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            From http://www.haiders.net/post/Dictionary-Lookup-avoiding-KeyNotFound-Exception.aspx
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key to look up.</param>
            <returns>The value associated with the key or default(TValue) of key not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.EnsureValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            create the value if not already stored for that key
            </summary>
        </member>
        <member name="T:VVVV.Utils.VColor.RGBAColor">
            <summary>
            256-bit color struct, compatible with vvvv colors.
            There is an implicit cast to the C# Color type and an explictit cast from C# color to RGBAColor.
            Aswell as implicit casts from and to Vector4D.
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.RGBAColor.R">
            <summary>
            The Red data field
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.RGBAColor.G">
            <summary>
            The Green data field
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.RGBAColor.B">
            <summary>
            The Blue data field
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.RGBAColor.A">
            <summary>
            The Alpha data field
            </summary>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            vvvv color constructor
            </summary>
            <param name="Red">red component, 0..1</param>
            <param name="Green">green component, 0..1</param>
            <param name="Blue">blue component, 0..1</param>
            <param name="Alpha">alpha component, 0..1</param>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.#ctor(System.Double[])">
            <summary>
            vvvv color constructor
            </summary>
            <param name="colors">double array of length 4 (red, green, blue, alpha) with values between 0..1</param>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.ToString">
            <summary>
            Get string name for the color
            </summary>
            <returns>Color name</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Implicit(VVVV.Utils.VColor.RGBAColor)~VVVV.Utils.VMath.Vector4D">
            <summary>
            Casts a color to a 4d-vector
            </summary>
            <param name="a">color to cast</param>
            <returns>4d-vector with same values than the input color</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Implicit(VVVV.Utils.VMath.Vector4D)~VVVV.Utils.VColor.RGBAColor">
            <summary>
            Casts a 4d-vector to a color
            </summary>
            <param name="a">4d-vector to cast</param>
            <returns>color with same values like than input 4d-vector</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Implicit(System.Drawing.Color)~VVVV.Utils.VColor.RGBAColor">
            <summary>
            Casts a C# color to a color
            </summary>
            <param name="C">C# color to cast</param>
            <returns>Same Color than the input C# color</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Explicit(VVVV.Utils.VColor.RGBAColor)~System.Drawing.Color">
            <summary>
            Explicit cast from color to C# color
            </summary>
            <param name="C">color to cast</param>
            <returns>C# color with closest values to the input the color</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_UnaryPlus(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            + color, makes no changes to a color
            </summary>
            <param name="C"></param>
            <returns>Input color C unchanged</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_UnaryNegation(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            - color, flips the sign off all color components
            </summary>
            <param name="C"></param>
            <returns>New color with all components of C negatived</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_LogicalNot(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            ! color, calculates the complementary color
            </summary>
            <param name="C"></param>
            <returns>Complementary color to the input color C</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_OnesComplement(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            ~ color, calculates the brighness of a color with the formula 0.222 * R + 0.707 * G + 0.071 * B
            </summary>
            <param name="C"></param>
            <returns>Brightness value of the input color C</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Addition(VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Adds the color components of two colors
            </summary>
            <param name="C1"></param>
            <param name="C2"></param>
            <returns>Sum of two colors</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Subtraction(VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Subtracts the color components of two colors
            </summary>
            <param name="C1"></param>
            <param name="C2"></param>
            <returns>Difference of two colors</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Multiply(VVVV.Utils.VColor.RGBAColor,System.Double)">
            <summary>
            Multiplies a color with a factor
            </summary>
            <param name="C"></param>
            <param name="factor"></param>
            <returns>Color multiplied by the factor</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Multiply(System.Double,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Multiplies a factor with a color
            </summary>
            <param name="factor"></param>
            <param name="C"></param>
            <returns>Color multiplied by the factor</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.RGBAColor.op_Multiply(VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Multiplies two colors, RGBA component wise
            </summary>
            <param name="C1"></param>
            <param name="C2"></param>
            <returns>Color C1 multiplied by color C2</returns>
        </member>
        <member name="P:VVVV.Utils.VColor.RGBAColor.Color">
            <summary>
            C# color type property, can be used for conversion
            Note, that there is also implicit casting from C# color, and explicit casting to C# color
            </summary>
        </member>
        <member name="T:VVVV.Utils.VColor.VColor">
            <summary>
            The vvvv c# color routines library
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.VColor.Red">
            <summary>
            Red as constant, (1,0,0,1)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.VColor.Green">
            <summary>
            Green as constant, (0,1,0,1)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.VColor.Blue">
            <summary>
            Blue as constant, (0,0,1,1)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.VColor.White">
            <summary>
            White as constant, (1,1,1,1)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VColor.VColor.Black">
            <summary>
            Black as constant, (0,0,0,1)
            </summary>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Complement(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Function to calculate the complementary color
            Note that the ! operator of RGBAColor does the same
            </summary>
            <param name="Col">Input color</param>
            <returns>Complement color of the RGB channels of the input color</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Offset(VVVV.Utils.VColor.RGBAColor,System.Double)">
            <summary>
            Adds a value to the RGB channels of a color and takes the result modulo 1
            </summary>
            <param name="Col"></param>
            <param name="Offset"></param>
            <returns>(Col.RGB + Offset) modulo 1</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Invert(System.Drawing.Color)">
            <summary>
            Function to get black or white, which ever has higher contrast to the input color, e.g. for text on colored backgrounds
            </summary>
            <param name="C">Input color</param>
            <returns>Black or white in C# color format</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.LerpRGBA(VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor,System.Double)">
            <summary>
            Linear interpolation (blending) between two colors
            </summary>
            <param name="Col1"></param>
            <param name="Col2"></param>
            <param name="x">Blending factor, 0..1</param>
            <returns>Linear interpolation (blending) between Col1 and Col2 if x in the range ]0..1[, Col1 if x = 0, Col2 if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.BilerpRGBA(System.Double,System.Double,VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor,VVVV.Utils.VColor.RGBAColor)">
            <summary>
            2d linear interpolation in x and y direction for colors
            </summary>
            <param name="x">The x position where to interpolate, 0..1</param>
            <param name="y">The y position where to interpolate, 0..1</param>
            <param name="P1">Upper left color</param>
            <param name="P2">Upper right color</param>
            <param name="P3">Lower right color</param>
            <param name="P4">Lower left color</param>
            <returns>Interpolated color between the 4 colors in the corners</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Brightness(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Calculates the brighness of a color with the formula 0.222 * R + 0.707 * G + 0.071 * B
            </summary>
            <param name="C"></param>
            <returns>Brightness value of the input color C</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.HSLAToColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get a C# color type from hue, saturation, lightness and alpha values
            </summary>
            <param name="H"></param>
            <param name="S"></param>
            <param name="L"></param>
            <param name="A"></param>
            <returns>C# Color in RGB format</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.FromHSVA(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get a color from hue, saturation, brightness and alpha values
            </summary>
            <param name="Hue"></param>
            <param name="Saturation"></param>
            <param name="Value"></param>
            <param name="Alpha"></param>
            <returns>Color in RGB format</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.HSVtoRGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Function to convert HSV values to RGB values
            
            merged methods from EasyRGB (http://www.easyrgb.com/math.php?MATH=M21#text21) 
            and the book GRAPHICS GEMS
            </summary>
            <param name="H"></param>
            <param name="S"></param>
            <param name="V"></param>
            <param name="Red">Output parameter, this variable gets filled with the red value</param>
            <param name="Green">Output parameter, this variable gets filled with the green value</param>
            <param name="Blue">Output parameter, this variable gets filled with the blue value</param>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.RGBtoHSV(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Function to convert RGB values to HSV values
            
            merged from http://www.easyrgb.com/math.php?MATH=M20#text20
            and http://www.efg2.com/Lab/Graphics/Colors/HSV.htm
            </summary>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
            <param name="Hue">Output parameter, this variable gets filled with the Hue value</param>
            <param name="Sat">Output parameter, this variable gets filled with the Saturation value</param>
            <param name="Value">Output parameter, this variable gets filled with the Brightness value</param>
            <returns>false, if color is gray, hue has no defined value in that case</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.HSLtoRGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes RGB values from HSL values, found on:
            http://www.geekymonkey.com/Programming/CSharp/RGB2HSL_HSL2RGB.htm
            </summary>
            <param name="H">Hue</param>
            <param name="S">Saturation</param>
            <param name="L">Lightness</param>
            <param name="Red">Output parameter, gets filled with the red value</param>
            <param name="Green">Output parameter, gets filled with the green value</param>
            <param name="Blue">Output parameter, gets filled with the blue value</param>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.RGBtoHSL(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes HSL values from RGB values, found on:
            http://www.geekymonkey.com/Programming/CSharp/RGB2HSL_HSL2RGB.htm
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="h">Output parameter, gets filled with the hue value</param>
            <param name="s">Output parameter, gets filled with the saturation value</param>
            <param name="l">Output parameter, gets filled with the lightness value</param>
            <returns>false, if color is gray, in that case hue is not defined</returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Serialze(VVVV.Utils.VColor.RGBAColor)">
            <summary>
            Converts a RGBAColor to a string with semicolon separator
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VColor.VColor.Deserialze(System.String)">
            <summary>
            Converts a string with 4 double values and  semicolon separator to a RGBAColor
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:VVVV.Utils.Concurrent.BlockingQueue`1">
            <summary>
            Implementation of BlockingQueue based on
            http://stackoverflow.com/questions/530211/creating-a-blocking-queuet-in-net
            </summary>
        </member>
        <member name="M:VVVV.Utils.Concurrent.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Puts an item in the queue.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Concurrent.BlockingQueue`1.TryDequeue(`0@)">
            <summary>
            Takes an item from the queue. Blocks if no item is available.
            Returns false if queue was closed.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Concurrent.BlockingQueue`1.Close">
            <summary>
            Wakes up all pending dequeues.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Concurrent.BlockingQueue`1.Count">
            <summary>
            Gets the number of elements contained in the queue.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Crypto.StringHasher">
            <summary>
            StringHasher.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Disposable">
            <summary>
            Implementation of IDisposable. Override the methods DisposeManaged or DisposeUnmanaged.
            </summary>
        </member>
        <member name="T:VVVV.Utils.IO.KeyboardState">
            <summary>
            Encapsulates the state of a keyboard. GetHashCode and Equals methods are overwritten
            so that two keyboard states can be easily compared.
            Use the KeyChars property to retrieve all pressed characters.
            
            Example:
            Keys = { Shift, a, d }
            KeyChars = { A, D }
            </summary>
        </member>
        <member name="M:VVVV.Utils.IO.KeyboardState.Equals(VVVV.Utils.IO.KeyboardState)">
            <summary>
            Returns true if the other keyboard state contains the same keys, has the same caps lock state
            and time value.
            </summary>
            <param name="other">The keyboard state to compare with the current keyboard state.</param>
            <returns>True if the specified keyboard state is equal to the current keyboard state.</returns>
        </member>
        <member name="P:VVVV.Utils.IO.KeyboardState.KeyCodes">
            <summary>
            Returns all the pressed keys.
            </summary>
        </member>
        <member name="P:VVVV.Utils.IO.KeyboardState.CapsLock">
            <summary>
            Gets whether or not the caps lock is enabled.
            </summary>
        </member>
        <member name="P:VVVV.Utils.IO.KeyboardState.KeyChars">
            <summary>
            Returns all the pressed characters. 
            
            For example if the KeyCodes property contains SHIFT and A, this property will return 'A'
            or if the KeyCodes property contains CTRL, ALT and Q, this property will return '@'
            on a german keyboard.
            </summary>
        </member>
        <member name="P:VVVV.Utils.IO.KeyboardState.Time">
            <summary>
            Used to distinguish two keyboard states if they contain the same same key codes.
            Useful if a key is pressed for a long time which should generate repeated key strokes.
            </summary>
        </member>
        <member name="P:VVVV.Utils.IO.KeyboardState.Modifiers">
            <summary>
            Returns all the pressed modifier keys in one enumeration.
            </summary>
        </member>
        <member name="T:VVVV.Utils.IO.MouseState">
            <summary>
            Encapsulates the state of a mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.IO.MouseState.X">
            <summary>
            The x coordinate of the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.IO.MouseState.Y">
            <summary>
            The y coordinate of the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.IO.MouseState.Buttons">
            <summary>
            The pressed mouse button.
            </summary>
        </member>
        <member name="F:VVVV.Utils.IO.MouseState.MouseWheel">
            <summary>
            The position of the mouse wheel.
            </summary>
        </member>
        <member name="T:VVVV.Utils.ManagedVCL.TopControl">
            <summary>
            Modified version of http://www.managed-vcl.com/downloads/ManagedVCLControl.zip
            Added method ProcessKeyPreview to be able to forward keys like
            HOME, INSERT and arrow keys.
            Overwrite IsDialogKey to control application specific behavior.
            </summary>
        </member>
        <member name="F:VVVV.Utils.ManagedVCL.TopControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VVVV.Utils.ManagedVCL.TopControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:VVVV.Utils.ManagedVCL.TopControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.Matrix2x2">
            <summary>
            2x2 transform matrix struct with operators
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix2x2.a">
            <summary>
            The 1. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix2x2.b">
            <summary>
            The 2. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix2x2.c">
            <summary>
            The 1. data element of 2. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix2x2.d">
            <summary>
            The 2. data element of 2. row
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.#ctor(VVVV.Utils.VMath.Matrix2x2)">
            <summary>
            Copy constructor for the 2x2 matrix struct
            </summary>
            <param name="A">Matrix to be copied</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Contructor for a 2x2 matrix from 4 float values, order is row major
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.#ctor(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Copies the significant elements m11, m12, m21, m22 from the 4x4 matrix
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.op_Division(VVVV.Utils.VMath.Matrix2x2,System.Double)">
            <summary>
            matrix / value, divides all matrix components with a value
            </summary>
            <param name="A"></param>
            <param name="v"></param>
            <returns>New matrix with all components of A divided by v</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.op_Addition(VVVV.Utils.VMath.Matrix2x2,VVVV.Utils.VMath.Matrix2x2)">
            <summary>
            matrix + matrix, adds the values of two matrices component wise
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns>New matrix with the pair wise sum of the components of A and B</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.op_Multiply(VVVV.Utils.VMath.Matrix2x2,VVVV.Utils.VMath.Matrix2x2)">
            <summary>
            2d matrix multiplication
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.op_Multiply(VVVV.Utils.VMath.Matrix2x2,VVVV.Utils.VMath.Vector2D)">
            <summary>
            matrix * 2d vector, applies a matrix transform to a 2d-vector
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>Vector b transformed by matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.Transpose">
            <summary>
            Transpose this 2x2 matrix
            </summary>
            <returns>a, c, b, d</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix2x2.Decompose(VVVV.Utils.VMath.Vector2D@,System.Double@)">
            <summary>
            Superfast 2d decomposition
            </summary>
            <param name="scale">Scale XY of the matrix</param>
            <param name="rotate">Rotation of the matrix in radian</param>
        </member>
        <member name="T:VVVV.Utils.VMath.Matrix4x4">
            <summary>
            4x4 transform matrix struct with operators, much faster then matrix classes
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m11">
            <summary>
            The 1. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m12">
            <summary>
            The 2. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m13">
            <summary>
            The 3. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m14">
            <summary>
            The 4. data element of 1. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m21">
            <summary>
            The 1. data element of 2. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m22">
            <summary>
            The 2. data element of 2. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m23">
            <summary>
            The 3. data element of 2. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m24">
            <summary>
            The 4. data element of 2. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m31">
            <summary>
            The 1. data element of 3. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m32">
            <summary>
            The 2. data element of 3. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m33">
            <summary>
            The 3. data element of 3. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m34">
            <summary>
            The 4. data element of 3. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m41">
            <summary>
            The 1. data element of 4. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m42">
            <summary>
            The 2. data element of 4. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m43">
            <summary>
            The 3. data element of 4. row
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Matrix4x4.m44">
            <summary>
            The 4. data element of 4. row
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.#ctor(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Copy constructor for the 4x4 matrix struct
            </summary>
            <param name="A">Matrix to be copied</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.#ctor(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            Contructor for a 4x4 matrix from four 4d-vectors, the vectors are treated as rows
            </summary>
            <param name="v1">1. row</param>
            <param name="v2">2. row</param>
            <param name="v3">3. row</param>
            <param name="v4">4. row</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.#ctor(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,System.Boolean)">
            <summary>
            Contructor for a 4x4 matrix from four 4d-vectors, the vectors are treated as rows or columns depending on the boolean parameter
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <param name="columns">if true, the vectors are treated as columns, else as rows</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Contructor for a 4x4 matrix from 16 float values, order is row major
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.#ctor(VVVV.Utils.VMath.Vector4D)">
            <summary>
            Contructor for a 4x4 matrix from a Vector4D v, given by the matrix representation of Quaternions into a Matrix4x4
            ( see http://en.wikipedia.org/wiki/Quaternion#Matrix_representations )
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_UnaryPlus(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            + matrix, makes no changes to a matrix
            </summary>
            <param name="A"></param>
            <returns>Input matrix A unchanged</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_UnaryNegation(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            - matrix, flips the sign off all matrix components
            </summary>
            <param name="A"></param>
            <returns>New matrix with all components of A negatived</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_LogicalNot(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            ! matrix, calculates the inverse of the matrix
            
            optimized 4x4 matrix inversion using cramer's rule, found in the game engine http://www.ogre3d.org
            takes about 1,8ns to execute on intel core2 duo 2Ghz, the intel reference
            implementation (not assembly optimized) was about 2,2ns.
            http://www.intel.com/design/pentiumiii/sml/24504301.pdf
            </summary>
            <param name="A"></param>
            <returns>Inverse matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_OnesComplement(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            ~ matrix, calculates the determinant of the matrix
            </summary>
            <param name="A"></param>
            <returns>Determinat of the matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Addition(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            matrix + matrix, adds the values of two matrices component wise
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns>New matrix with the pair wise sum of the components of A and B</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Addition(VVVV.Utils.VMath.Matrix4x4,System.Double)">
            <summary>
            matrix + value, adds a value to all matrix components
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>New matrix with b added to all components of A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Addition(System.Double,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            value + matrix, adds a value to all matrix components
            </summary>
            <param name="a"></param>
            <param name="B"></param>
            <returns>New matrix with b added to all components of A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Subtraction(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            matrix - matrix, subtracts the components of B from the components of A
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns>New matrix with the pair wise difference of the components of A and B</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Subtraction(VVVV.Utils.VMath.Matrix4x4,System.Double)">
            <summary>
            matrix - value, subtracts a value from all matrix components
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>New matrix with b subtracted from all components of A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Subtraction(System.Double,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            value - matrix, subtracts all matrix components from a value 
            </summary>
            <param name="a"></param>
            <param name="B"></param>
            <returns>New matrix with all components of A subtracted from b</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            matrix * matrix, performs a matrix multiplication
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns>Matrix product of A and B</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Vector4D)">
            <summary>
            matrix * 4d vector, applies a matrix transform to a 4d-vector
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>Vector b transformed by matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Vector3D)">
            <summary>
            matrix * 3d vector, applies a matrix transform to a 3d-vector, (x, y, z, 1) and divides by w
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>Vector b transformed by matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(VVVV.Utils.VMath.Matrix4x4,VVVV.Utils.VMath.Vector2D)">
            <summary>
            matrix * 2d vector, applies a matrix transform to a 2d-vector, (x, y, 0, 1)
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>Vector b transformed by matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(VVVV.Utils.VMath.Matrix4x4,System.Double)">
            <summary>
            matrix * value, multiplies all matrix components with a value
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>New matrix with all components of A multiplied by b</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Multiply(System.Double,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            value * matrix, multiplies all matrix components with a value
            </summary>
            <param name="a"></param>
            <param name="B"></param>
            <returns>New matrix with all components of B multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Division(VVVV.Utils.VMath.Matrix4x4,System.Double)">
            <summary>
            matrix / value, divides all matrix components with a value
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns>New matrix with all components of A divided by b</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.op_Division(System.Double,VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            value / matrix, divides a value by all matrix components
            </summary>
            <param name="a"></param>
            <param name="B"></param>
            <returns>New matrix with a divided by all components of B</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Matrix4x4.Transpose">
            <summary>
            Transpose thi 4x4 matrix
            </summary>
            <returns>Transpose of this matrix</returns>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.row1">
            <summary>
            Get/Set the 1. row as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.row2">
            <summary>
            Get/Set the 2. row as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.row3">
            <summary>
            Get/Set the 3. row as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.row4">
            <summary>
            Get/Set the 4. row as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.col1">
            <summary>
            Get/Set the 1. column as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.col2">
            <summary>
            Get/Set the 2. column as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.col3">
            <summary>
            Get/Set the 3. column as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.col4">
            <summary>
            Get/Set the 4. column as 4d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.Item(System.Int32)">
            <summary>
            Unsafe but very fast indexer for 4x4 matrix, [0..15]
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Matrix4x4.Item(System.Int32,System.Int32)">
            <summary>
            Unsafe but very fast 2-d indexer for 4x4 matrix, [0..3, 0..3]
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.Tweener">
            <summary>
            Tweener routines, interpolation functions for a value in the range [0..1] in various shapes
            
            Code by west
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuadEaseIn(System.Double)">
            <summary>
            QUADRATIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuadEaseOut(System.Double)">
            <summary>
            QUADRATIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuadEaseInOut(System.Double)">
            <summary>
            QUADRATIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuadEaseOutIn(System.Double)">
            <summary>
            QUADRATIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CubicEaseIn(System.Double)">
            <summary>
            CUBIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CubicEaseOut(System.Double)">
            <summary>
            CUBIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CubicEaseInOut(System.Double)">
            <summary>
            CUBIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CubicEaseOutIn(System.Double)">
            <summary>
            CUBIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuarticEaseIn(System.Double)">
            <summary>
            QUARTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuarticEaseOut(System.Double)">
            <summary>
            QUARTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuarticEaseInOut(System.Double)">
            <summary>
            QUARTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuarticEaseOutIn(System.Double)">
            <summary>
            QUARTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>		
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuinticEaseIn(System.Double)">
            <summary>
            QUINTYIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuinticEaseOut(System.Double)">
            <summary>
            QUINTYIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuinticEaseInOut(System.Double)">
            <summary>
            QUINTYIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.QuinticEaseOutIn(System.Double)">
            <summary>
            QUINTYIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.SinusoidalEaseIn(System.Double)">
            <summary>
            SINUSOIDAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.SinusoidalEaseOut(System.Double)">
            <summary>
            SINUSOIDAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.SinusoidalEaseInOut(System.Double)">
            <summary>
            SINUSOIDAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.SinusoidalEaseOutIn(System.Double)">
            <summary>
            SINUSOIDAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ExponentialEaseIn(System.Double)">
            <summary>
            EXPONENTIAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ExponentialEaseOut(System.Double)">
            <summary>
            EXPONENTIAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ExponentialEaseInOut(System.Double)">
            <summary>
            EXPONENTIAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ExponentialEaseOutIn(System.Double)">
            <summary>
            EXPONENTIAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CircularEaseIn(System.Double)">
            <summary>
            CIRCULAR EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CircularEaseOut(System.Double)">
            <summary>
            CIRCULAR EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CircularEaseInOut(System.Double)">
            <summary>
            CIRCULAR EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.CircularEaseOutIn(System.Double)">
            <summary>
            CIRCULAR EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>	
            <returns>Shaped value</returns>			
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ElasticEaseIn(System.Double)">
            <summary>
            ELASTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ElasticEaseOut(System.Double)">
            <summary>
            ELASTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ElasticEaseInOut(System.Double)">
            <summary>
            ELASTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.ElasticEaseOutIn(System.Double)">
            <summary>
            ELASTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BackEaseIn(System.Double)">
            <summary>
            BACK EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BackEaseOut(System.Double)">
            <summary>
            BACK EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BackEaseInOut(System.Double)">
            <summary>
            BACK EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BackEaseOutIn(System.Double)">
            <summary>
            BACK EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BounceEaseIn(System.Double)">
            <summary>
            BOUNCE EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BounceEaseOut(System.Double)">
            <summary>
            BOUNCE EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BounceEaseInOut(System.Double)">
            <summary>
            BOUNCE EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Tweener.BounceEaseOutIn(System.Double)">
            <summary>
            BOUNCE EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="T:VVVV.Utils.VMath.Vector2D">
            <summary>
            Fast 2d vector struct with operators
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector2D.x">
            <summary>
            Data component for the x dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector2D.y">
            <summary>
            Data component for the y dimension
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.#ctor(VVVV.Utils.VMath.Vector2D)">
            <summary>
            Copies a 2d-vecor
            </summary>
            <param name="v">Vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Makes a 2d-vector from 2 values
            </summary>
            <param name="x">x component of output vector</param>
            <param name="y">y component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.#ctor(System.Double)">
            <summary>
            Makes a 2d-vector from 1 value, all vector components are set to the input value
            </summary>
            <param name="a">Value for vector components</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_UnaryPlus(VVVV.Utils.VMath.Vector2D)">
            <summary>
            + vector, makes no changes to a vector
            </summary>
            <param name="v"></param>
            <returns>Input vector v unchanged</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_UnaryNegation(VVVV.Utils.VMath.Vector2D)">
            <summary>
            - vector, flips the sign off all vector components
            </summary>
            <param name="v"></param>
            <returns>New vector with all components of v negatived</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_LogicalNot(VVVV.Utils.VMath.Vector2D)">
            <summary>
            ! vector, calculates the length of the vector
            </summary>
            <param name="v"></param>
            <returns>Length of input vector v</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_OnesComplement(VVVV.Utils.VMath.Vector2D)">
            <summary>
            ~ vector, normalizes a vector
            </summary>
            <param name="v"></param>
            <returns>Vector with same direction than v but length 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Addition(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector + vector, adds the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise sum of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Addition(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector + value, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Addition(System.Double,VVVV.Utils.VMath.Vector2D)">
            <summary>
            value + vector, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Subtraction(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector - vector, subtracts the components of v2 from the components of v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise difference of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Subtraction(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector - value, subtracts a value from all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a subtracted from all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Subtraction(System.Double,VVVV.Utils.VMath.Vector2D)">
            <summary>
            value - vector, subtracts all vector components from a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 subtracted from a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Multiply(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector * vector, multiplies the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise product of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Multiply(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector * value, multiplies a value by all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Multiply(System.Double,VVVV.Utils.VMath.Vector2D)">
            <summary>
            value * vector, multiplies a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Division(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector / vector, divides the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 divided by components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Division(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector / value, divides all vector components by a value 
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 divided by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Division(System.Double,VVVV.Utils.VMath.Vector2D)">
            <summary>
            value / vector, divides a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with a divided by all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Modulus(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector % vector, component wise modulo for vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 modulo components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Modulus(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector % value, all vector components modulo a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with components of v1 modulo a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Modulus(System.Double,VVVV.Utils.VMath.Vector2D)">
            <summary>
            value % vector, a value modulo all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with input a modulo components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_BitwiseAnd(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            2d-vector &amp; 2d-vector, performs a 2d-cross product,
            this is the signed size of the parallelogram spanned by v1 and v2.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Scalar cross product of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_BitwiseOr(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector | vector, dot product for vectors, that is the sum of all component wise products
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Dot product of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_GreaterThan(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector &gt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_LessThan(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector &lt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_GreaterThanOrEqual(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector &gt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater or equal to a</returns> 
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_LessThanOrEqual(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            vector &lt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller or equal to a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Equality(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector == vector, checks if the two vectors are equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if all components of v1 equal the components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector2D.op_Inequality(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            vector != vector, checks if the two vectors are not equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if any component of v1 is different from the components of v2</returns>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector2D.Length">
            <summary>
            Get or Set the Length of this vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector2D.LengthSquared">
            <summary>
            Gets the squared length of this vector, much faster than Length
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector2D.Item(System.Int32)">
            <summary>
            Unsafe but very fast indexer for 2d-vector, [0..1]
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.Vector3D">
            <summary>
            Fast 3d vector struct with operators
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.x">
            <summary>
            Data component for the x dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.y">
            <summary>
            Data component for the y dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.z">
            <summary>
            Data component for the z dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.Zero">
            <summary>
            (0, 0, 0) Vector
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.eX">
            <summary>
            (1, 0, 0) basis vector in x direction
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.eY">
            <summary>
            (0, 1, 0) basis vector in y direction
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector3D.eZ">
            <summary>
            (0, 0, 1) basis vector in z direction
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.#ctor(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Copies a 3d-vecor
            </summary>
            <param name="v">Vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.#ctor(VVVV.Utils.VMath.Vector2D)">
            <summary>
            Makes a 3d-vector copy from a 2d-vector, z is set to 0
            </summary>
            <param name="v">2d-vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.#ctor(VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            Makes a 3d-vector copy from a 2d-vector and z component
            </summary>
            <param name="v">2d-vector to copy</param>
            <param name="z">z component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Makes a 3d-vector from 3 values
            </summary>
            <param name="x">x component of output vector</param>
            <param name="y">y component of output vector</param>
            <param name="z">z component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.#ctor(System.Double)">
            <summary>
            Makes a 3d-vector from 1 value, all vector components are set to the input value
            </summary>
            <param name="a">Value for vector components</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_UnaryPlus(VVVV.Utils.VMath.Vector3D)">
            <summary>
            + vector, makes no changes to a vector
            </summary>
            <param name="v"></param>
            <returns>Input vector v unchanged</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_UnaryNegation(VVVV.Utils.VMath.Vector3D)">
            <summary>
            - vector, flips the sign off all vector components
            </summary>
            <param name="v"></param>
            <returns>New vector with all components of v negatived</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_LogicalNot(VVVV.Utils.VMath.Vector3D)">
            <summary>
            ! vector, calculates the length of the vector
            </summary>
            <param name="v"></param>
            <returns>Length of input vector v</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_OnesComplement(VVVV.Utils.VMath.Vector3D)">
            <summary>
            ~ vector, normalizes a vector
            </summary>
            <param name="v"></param>
            <returns>Vector with same direction than v but length 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Addition(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector + vector, adds the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise sum of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Addition(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector + value, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Addition(System.Double,VVVV.Utils.VMath.Vector3D)">
            <summary>
            value + vector, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Subtraction(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector - vector, subtracts the components of v2 from the components of v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise difference of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Subtraction(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector - value, subtracts a value from all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a subtracted from all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Subtraction(System.Double,VVVV.Utils.VMath.Vector3D)">
            <summary>
            value - vector, subtracts all vector components from a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 subtracted from a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Multiply(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector * vector, multiplies the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise product of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Multiply(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector * value, multiplies a value by all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Multiply(System.Double,VVVV.Utils.VMath.Vector3D)">
            <summary>
            value * vector, multiplies a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Division(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector / vector, divides the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 divided by components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Division(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector / value, divides all vector components by a value 
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 divided by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Division(System.Double,VVVV.Utils.VMath.Vector3D)">
            <summary>
            value / vector, divides a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with a divided by all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Modulus(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector % vector, component wise modulo for vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 modulo components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Modulus(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector % value, all vector components modulo a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with components of v1 modulo a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Modulus(System.Double,VVVV.Utils.VMath.Vector3D)">
            <summary>
            value % vector, a value modulo all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with input a modulo components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_BitwiseAnd(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            3d-vector &amp; 3d-vector, performs a left handed 3d cross product
            
            code is:
            <c>
            x = v1.y * v2.z - v1.z * v2.y
            y = v1.z * v2.x - v1.x * v2.y
            z = v1.x * v2.y - v1.y * v2.x
            </c>
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector which is orthogonal to v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_BitwiseOr(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector | vector, dot product for vectors, that is the sum of all component wise products
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Dot product of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.CrossRH(VVVV.Utils.VMath.Vector3D)">
            <summary>
            performs a righ handed 3d cross product
            
            code is:
            <c>
            x = v1.y * v2.z - v2.y * v1.z;
            y = v1.z * v2.x - v2.z * v1.x;
            z = v1.x * v2.y - v2.x * v1.y;
            </c>
            </summary>
            <param name="v">right vector</param>
            <returns>New vector which is orthogonal to this and v</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_GreaterThan(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector &gt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_LessThan(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector &lt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_GreaterThanOrEqual(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector &gt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater or equal to a</returns> 
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_LessThanOrEqual(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            vector &lt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller or equal to a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Equality(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector == vector, checks if the two vectors are equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if all components of v1 equal the components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector3D.op_Inequality(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            vector != vector, checks if the two vectors are not equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if any component of v1 is different from the components of v2</returns>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.Length">
            <summary>
            Get or Set the Length of this vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.LengthSquared">
            <summary>
            Gets the squared length of this vector, much faster than Length
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.xy">
            <summary>
            Get/set x and y components as 2d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.xz">
            <summary>
            Get/set x and z components as 2d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.yz">
            <summary>
            Get/set y and z components as 2d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector3D.Item(System.Int32)">
            <summary>
            Unsafe but very fast indexer for 3d-vector, [0..2]
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.Vector4D">
            <summary>
            Fast 4d vector struct with operators
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector4D.x">
            <summary>
            Data component for the x dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector4D.y">
            <summary>
            Data component for the y dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector4D.z">
            <summary>
            Data component for the z dimension
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.Vector4D.w">
            <summary>
            Data component for the w dimension
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector4D)">
            <summary>
            Copies a 4d-vecor
            </summary>
            <param name="v">Vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Makes a 4d-vector copy from a 3d-vector, w is set to 1
            </summary>
            <param name="v">3d-vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            Makes a 4d-vector copy from a 3d-vector and w component
            </summary>
            <param name="v">3d-vector to copy</param>
            <param name="w">w component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector2D)">
            <summary>
            Makes a 4d-vector copy from a 2d-vector, z is set to 0 and w to 1
            </summary>
            <param name="v">2d-vector to copy</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            Makes a 4d-vector copy from a two 2d-vectors
            </summary>
            <param name="v1">2d-vector for x and y</param>
            <param name="v2">2d-vector for z and w</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(VVVV.Utils.VMath.Vector2D,System.Double,System.Double)">
            <summary>
            Makes a 4d-vector copy from a 2d-vector and z and w component
            </summary>
            <param name="v">2d-vector to copy</param>
            <param name="z">z component of output vector</param>
            <param name="w">w component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Makes a 4d-vector from 4 values
            </summary>
            <param name="x">x component of output vector</param>
            <param name="y">y component of output vector</param>
            <param name="z">z component of output vector</param>
            <param name="w">w component of output vector</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.#ctor(System.Double)">
            <summary>
            Makes a 4d-vector from 1 value, all vector components are set to the input value
            </summary>
            <param name="a">Value for vector components</param>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_UnaryPlus(VVVV.Utils.VMath.Vector4D)">
            <summary>
            + vector, makes no changes to a vector
            </summary>
            <param name="v"></param>
            <returns>Input vector v unchanged</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_UnaryNegation(VVVV.Utils.VMath.Vector4D)">
            <summary>
            - vector, flips the sign off all vector components
            </summary>
            <param name="v"></param>
            <returns>New vector with all components of v negatived</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_LogicalNot(VVVV.Utils.VMath.Vector4D)">
            <summary>
            ! vector, calculates the length of the vector
            </summary>
            <param name="v"></param>
            <returns>Length of input vector v</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_OnesComplement(VVVV.Utils.VMath.Vector4D)">
            <summary>
            ~ vector, normalizes a vector
            </summary>
            <param name="v"></param>
            <returns>Vector with same direction than v but length 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Addition(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector + vector, adds the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise sum of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Addition(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector + value, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Addition(System.Double,VVVV.Utils.VMath.Vector4D)">
            <summary>
            value + vector, adds a value to all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a added to all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Subtraction(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector - vector, subtracts the components of v2 from the components of v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise difference of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Subtraction(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector - value, subtracts a value from all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with a subtracted from all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Subtraction(System.Double,VVVV.Utils.VMath.Vector4D)">
            <summary>
            value - vector, subtracts all vector components from a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 subtracted from a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Multiply(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector * vector, multiplies the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with the pair wise product of the components of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Multiply(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector * value, multiplies a value by all vector components
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Multiply(System.Double,VVVV.Utils.VMath.Vector4D)">
            <summary>
            value * vector, multiplies a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with all components of v1 multiplied by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Division(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector / vector, divides the values of two vectors component wise
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 divided by components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Division(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector / value, divides all vector components by a value 
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with all components of v1 divided by a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Division(System.Double,VVVV.Utils.VMath.Vector4D)">
            <summary>
            value / vector, divides a value by all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with a divided by all components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Modulus(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector % vector, component wise modulo for vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>New vector with components of v1 modulo components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Modulus(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector % value, all vector components modulo a value
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns>New vector with components of v1 modulo a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Modulus(System.Double,VVVV.Utils.VMath.Vector4D)">
            <summary>
            value % vector, a value modulo all vector components
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns>New vector with input a modulo components of v1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_BitwiseAnd(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
             <summary>
             4d-vector &amp; 4d-vector, performs a quaternion multiplication
             
             defined as:
            	w = v1.w * v2.w - (v1.xyz | v2.xyz)
            	xyz = v1.xyz * v2.w + v2.xyz * v1.w + (v1.xyz &amp; v2.xyz)
            
             code is:
             <c>
             x = v1.w*v2.x + v1.x*v2.w + v1.y*v2.z - v1.z*v2.y
            	y = v1.w*v2.y + v1.y*v2.w + v1.z*v2.x - v1.x*v2.z
            	z = v1.w*v2.z + v1.z*v2.w + v1.x*v2.y - v1.y*v2.x
            	w = v1.w*v2.w - v1.x*v2.x - v1.y*v2.y - v1.z*v2.z
             </c>
             </summary>
             <param name="v1"></param>
             <param name="v2"></param>
             <returns>Quaternion v1 multiplied by quaternion v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_BitwiseOr(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector | vector, dot product for vectors, that is the sum of all component wise products
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Dot product of v1 and v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_GreaterThan(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector &gt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_LessThan(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector &lt; value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller than a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_GreaterThanOrEqual(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector &gt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are greater or equal to a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_LessThanOrEqual(VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            vector &lt;= value, compares all vector components to a value
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns>true, if all components of v are smaller or equal to a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Equality(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector == vector, checks if the two vectors are equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if all components of v1 equal the components of v2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.Vector4D.op_Inequality(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            vector != vector, checks if the two vectors are not equal
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true, if any component of v1 is different from the components of v2</returns>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector4D.Length">
            <summary>
            Get or Set the Length of this vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector4D.LengthSquared">
            <summary>
            Gets the squared length of this vector, much faster than Length
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector4D.xy">
            <summary>
            Get/set x and y components as 2d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector4D.xyz">
            <summary>
            Get/set x, y and z components as 3d-vector
            </summary>
        </member>
        <member name="P:VVVV.Utils.VMath.Vector4D.Item(System.Int32)">
            <summary>
            Unsafe but very fast indexer for 4d-vector, [0..3]
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.TMapMode">
            <summary>
            vvvv like modi for the Map function
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.TMapMode.Float">
            <summary>
            Maps the value continously
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.TMapMode.Clamp">
            <summary>
            Maps the value, but clamps it at the min/max borders of the output range
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.TMapMode.Wrap">
            <summary>
            Maps the value, but repeats it into the min/max range, like a modulo function
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.TMapMode.Mirror">
            <summary>
            Maps the value, but mirrors it into the min/max range, always against either start or end, whatever is closer
            </summary>
        </member>
        <member name="T:VVVV.Utils.VMath.VMath">
            <summary>
            The vvvv c# math routines library
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.Pi">
            <summary>
            Pi, as you know it
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.TwoPi">
            <summary>
            Pi * 2
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.PiRez">
            <summary>
            1 / Pi, multiply by this if you have to divide by Pi
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.TwoPiRez">
            <summary>
            2 / Pi, multiply by this if you have to divide by 2*Pi
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.CycToRad">
            <summary>
            Conversion factor from cycles to radians, (2 * Pi)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.RadToCyc">
            <summary>
            Conversion factor from radians to cycles, 1/(2 * Pi)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.DegToRad">
            <summary>
            Conversion factor from degree to radians, (2 * Pi)/360
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.RadToDeg">
            <summary>
            Conversion factor from radians to degree, 360/(2 * Pi)
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.DegToCyc">
            <summary>
            Conversion factor from degree to radians, 1/360
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.CycToDeg">
            <summary>
            Conversion factor from radians to degree, 360
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.IdentityMatrix">
            <summary>
            Identity matrix 
            1000 
            0100
            0010
            0001
            </summary>
        </member>
        <member name="F:VVVV.Utils.VMath.VMath.Random">
            <summary>
            A random object for conveninece
            </summary>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RandomVector2D">
            <summary>
            Creates a random 2d vector.
            </summary>
            <returns>Random vector with its components in the range [-1..1].</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RandomVector3D">
            <summary>
            Creates a random 3d vector.
            </summary>
            <returns>Random vector with its components in the range [-1..1].</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RandomVector4D">
            <summary>
            Creates a random 4d vector.
            </summary>
            <returns>Random vector with its components in the range [-1..1].</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Factorial(System.Int32)">
            <summary>
            Factorial function, DON'T FEED ME WITH LARGE NUMBERS !!! (n>10 can be huge)
            </summary>
            <param name="n"></param>
            <returns>The product n * n-1 * n-2 * n-3 * .. * 3 * 2 * 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Binomial(System.Int32,System.Int32)">
            <summary>
            Binomial function
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns>The number of k-tuples of n items</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Pow(System.Double,System.Int32)">
            <summary>
            Raises x to the power of y.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns>Returns x raised to the power of y.</returns>
            <remarks>This method should be considerably faster than Math.Pow for small y.</remarks>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves a quadratic equation a*x^2 + b*x + c for x
            </summary>
            <param name="a">Coefficient of x^2</param>
            <param name="b">Coefficient of x</param>
            <param name="c">Constant</param>
            <param name="x1">First solution</param>
            <param name="x2">Second solution</param>
            <returns>Number of solution, 0, 1, 2 or int.MaxValue</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Min(System.Double,System.Double)">
            <summary>
            Min function
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Smaller value of the two input parameters</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Max(System.Double,System.Double)">
            <summary>
            Max function
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Greater value of the two input parameters</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Zmod(System.Int32,System.Int32)">
            <summary>
            Modulo function with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="d"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamp function, clamps a floating point value into the range [min..max]
            </summary>
            <param name="x"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp function, clamps an integer value into the range [min..max]
            </summary>
            <param name="x"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamp function, clamps a long value into the range [min..max]
            </summary>
            <param name="x"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector2D,System.Double,System.Double)">
            <summary>
            Clamp function, clamps a 2d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector3D,System.Double,System.Double)">
            <summary>
            Clamp function, clamps a 3d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector4D,System.Double,System.Double)">
            <summary>
            Clamp function, clamps a 4d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            Clamp function, clamps a 2d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            Clamp function, clamps a 3d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Clamp(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            Clamp function, clamps a 4d-vector into the range [min..max]
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Abs(System.Double)">
            <summary>
            Abs function for values, just for completeness
            </summary>
            <param name="a"></param>
            <returns>New value with the absolut value of a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Abs(VVVV.Utils.VMath.Vector2D)">
            <summary>
            Abs function for 2d-vectors
            </summary>
            <param name="a"></param>
            <returns>New vector with the absolut values of the components of input vector a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Abs(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Abs function for 3d-vectors
            </summary>
            <param name="a"></param>
            <returns>New vector with the absolut values of the components of input vector a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Abs(VVVV.Utils.VMath.Vector4D)">
            <summary>
            Abs function for 4d-vectors
            </summary>
            <param name="a"></param>
            <returns>New vector with the absolut values of the components of input vector a</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Dist(System.Double,System.Double)">
            <summary>
            Calculates the distance between two values
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>Positive distance between p1 and p2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Dist(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            Calculates the distance between two 2d-points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>Positive distance between p1 and p2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Dist(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            Calculates the distance between two 3d-points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>Positive distance between p1 and p2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Dist(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            Calculates the distance between two 4d-points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>Positive distance between p1 and p2</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Ratio(System.Double,System.Double,System.Double,VVVV.Utils.VMath.TMapMode)">
            <summary>
            This Method can be seen as an inverse of Lerp (in Mode Float). Additionally it provides the infamous Mapping Modes, author: velcrome
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="start">Minimum of input value range</param>
            <param name="end">Maximum of input value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input value mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(System.Double,System.Double,System.Double,System.Double,System.Double,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for values
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input value mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector2D,System.Double,System.Double,System.Double,System.Double,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 2d-vectors and value range bounds
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector3D,System.Double,System.Double,System.Double,System.Double,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 3d-vectors and value range bounds
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector4D,System.Double,System.Double,System.Double,System.Double,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 4d-vectors and value range bounds
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 2d-vectors and range bounds given as vectors
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 3d-vectors and range bounds given as vectors
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Map(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.TMapMode)">
            <summary>
            The infamous Map function of vvvv for 4d-vectors and range bounds given as vectors
            </summary>
            <param name="Input">Input value to convert</param>
            <param name="InMin">Minimum of input value range</param>
            <param name="InMax">Maximum of input value range</param>
            <param name="OutMin">Minimum of destination value range</param>
            <param name="OutMax">Maximum of destination value range</param>
            <param name="mode">Defines the behavior of the function if the input value exceeds the destination range 
            <see cref="T:VVVV.Utils.VMath.TMapMode">TMapMode</see></param>
            <returns>Input vector mapped from input range into destination range</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation (blending) between two values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Linear interpolation between a and b if x in the range ]0..1[ or a if x = 0 or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Lerp(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,System.Double)">
            <summary>
            Linear interpolation (blending) between two 2d-vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Linear interpolation between a and b if x in the range ]0..1[, or a if x = 0, or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Lerp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            Linear interpolation (blending) between two 3d-vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Linear interpolation between a and b if x in the range ]0..1[, or a if x = 0, or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Lerp(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            Linear interpolation (blending) between two 4d-vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Linear interpolation between a and b if x in the range ]0..1[, or a if x = 0, or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Bilerp(VVVV.Utils.VMath.Vector2D,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            2d linear interpolation in x and y direction for single values
            </summary>
            <param name="Input">The position where to interpolate, 0..1</param>
            <param name="P1">Upper left value</param>
            <param name="P2">Upper right value</param>
            <param name="P3">Lower right value</param>
            <param name="P4">Lower left value</param>
            <returns>Interpolated value between the 4 values of the corners of a unit square</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Bilerp(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            2d linear interpolation in x and y direction for 2d-vectors
            </summary>
            <param name="Input">The position where to interpolate, 0..1</param>
            <param name="P1">Upper left vector</param>
            <param name="P2">Upper right vector</param>
            <param name="P3">Lower right vector</param>
            <param name="P4">Lower left vector</param>
            <returns>Interpolated vector between the 4 vectors of the corners of a unit square</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Bilerp(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            2d linear interpolation in x and y direction for 3d-vectors
            </summary>
            <param name="Input">The position where to interpolate, 0..1</param>
            <param name="P1">Upper left vector</param>
            <param name="P2">Upper right vector</param>
            <param name="P3">Lower right vector</param>
            <param name="P4">Lower left vector</param>
            <returns>Interpolated vector between the 4 vectors of the corners of a unit square</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Bilerp(VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            2d linear interpolation in x and y direction for 4d-vectors
            </summary>
            <param name="Input">The position where to interpolate, 0..1</param>
            <param name="P1">Upper left vector</param>
            <param name="P2">Upper right vector</param>
            <param name="P3">Lower right vector</param>
            <param name="P4">Lower left vector</param>
            <returns>Interpolated vector between the 4 vectors of the corners of a unit square</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Trilerp(VVVV.Utils.VMath.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            3d linear interpolation in x, y and z direction for single values
            </summary>
            <param name="Input">The Interpolation factor, 3d-position inside the unit cube</param>
            <param name="V010">Front upper left</param>
            <param name="V110">Front upper right</param>
            <param name="V100">Front lower right</param>
            <param name="V000">Front lower left</param>
            <param name="V011">Back upper left</param>
            <param name="V111">Back upper right</param>
            <param name="V101">Back lower right</param>
            <param name="V001">Back lower left</param>
            <returns>Interpolated value between the 8 values of the corners of a unit cube</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Trilerp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D,VVVV.Utils.VMath.Vector2D)">
            <summary>
            3d linear interpolation in x, y and z direction for 2d-vectors
            </summary>
            <param name="Input">The Interpolation factor, 3d-position inside the unit cube</param>
            <param name="V010">Front upper left</param>
            <param name="V110">Front upper right</param>
            <param name="V100">Front lower right</param>
            <param name="V000">Front lower left</param>
            <param name="V011">Back upper left</param>
            <param name="V111">Back upper right</param>
            <param name="V101">Back lower right</param>
            <param name="V001">Back lower left</param>
            <returns>Interpolated vector between the 8 vectors of the corners of a unit cube</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Trilerp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            3d linear interpolation in x, y and z direction for 3d-vectors
            </summary>
            <param name="Input">The Interpolation factor, 3d-position inside the unit cube</param>
            <param name="V010">Front upper left</param>
            <param name="V110">Front upper right</param>
            <param name="V100">Front lower right</param>
            <param name="V000">Front lower left</param>
            <param name="V011">Back upper left</param>
            <param name="V111">Back upper right</param>
            <param name="V101">Back lower right</param>
            <param name="V001">Back lower left</param>
            <returns>Interpolated vector between the 8 vectors of the corners of a unit cube</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Trilerp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            3d linear interpolation in x, y and z direction for 4d-vectors
            </summary>
            <param name="Input">The Interpolation factor, 3d-position inside the unit cube</param>
            <param name="V010">Front upper left</param>
            <param name="V110">Front upper right</param>
            <param name="V100">Front lower right</param>
            <param name="V000">Front lower left</param>
            <param name="V011">Back upper left</param>
            <param name="V111">Back upper right</param>
            <param name="V101">Back lower right</param>
            <param name="V001">Back lower left</param>
            <returns>Interpolated vector between the 8 vectors of the corners of a unit cube</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic interpolation curve used in the vvvv timeline
            </summary>
            <param name="CurrenTime"></param>
            <param name="Handle0"></param>
            <param name="Handle1"></param>
            <param name="Handle2"></param>
            <param name="Handle3"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Slerp(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,System.Double)">
            <summary>
            Spherical interpolation between two quaternions (4d-vectors)
            The effect is a rotation with uniform angular velocity around a fixed rotation axis from one state of rotation to another
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Spherical interpolation between a and b if x in the range ]0..1[, or a if x = 0, or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Slerp(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,System.Double)">
            <summary>
            Spherical interpolation between two points (3d-vectors)
            The effect is a rotation with uniform angular velocity around a fixed rotation axis from one state of rotation to another
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Spherical interpolation between a and b if x in the range ]0..1[, or a if x = 0, or b if x = 1</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Cartesian(System.Double,System.Double,System.Double)">
            <summary>
            Convert polar coordinates (pitch, yaw, lenght) in radian to cartesian coordinates (x, y, z).
            To convert angles from cycles to radian, multiply them with VMath.CycToDec.
            </summary>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="length"></param>
            <returns>3d-point in cartesian coordinates</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Cartesian(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Convert polar coordinates (pitch, yaw, lenght) in radian to cartesian coordinates (x, y, z).
            To convert angles from cycles to radian, multiply them with VMath.CycToDec.
            </summary>
            <param name="polar">3d-vector containing the polar coordinates as (pitch, yaw, length)</param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.CartesianVVVV(System.Double,System.Double,System.Double)">
            <summary>
            Convert polar coordinates (pitch, yaw, lenght) in radian to cartesian coordinates (x, y, z) exacly like the vvvv node Cartesian.
            To convert angles from cycles to radian, multiply them with VMath.CycToDec.
            </summary>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="length"></param>
            <returns>3d-point in cartesian coordinates like the vvvv node does it</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.CartesianVVVV(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Convert polar coordinates (pitch, yaw, lenght) in radian to cartesian coordinates (x, y, z) exacly like the vvvv node Cartesian.
            To convert angles from cycles to radian, multiply them with VMath.CycToDec.
            </summary>
            <param name="polar">3d-vector containing the polar coordinates as (pitch, yaw, length)</param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Polar(System.Double,System.Double,System.Double)">
            <summary>
            Convert cartesian coordinates (x, y, z) to polar coordinates (pitch, yaw, lenght) in radian.
            To convert the angles to cycles, multiply them with VMath.DegToCyc.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>3d-point in polar coordinates</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Polar(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Convert cartesian coordinates (x, y, z) to polar coordinates (pitch, yaw, lenght) in radian.
            To convert the angles to cycles, multiply them with VMath.DegToCyc.
            </summary>
            <param name="a"></param>
            <returns>Point in polar coordinates</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.PolarVVVV(System.Double,System.Double,System.Double)">
            <summary>
            Convert cartesian coordinates (x, y, z) to VVVV style polar coordinates (pitch, yaw, lenght) in radian.
            To convert the angles to cycles, multiply them with VMath.DegToCyc.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>3d-point in polar coordinates</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.PolarVVVV(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Convert cartesian coordinates (x, y, z) to polar VVVV style coordinates (pitch, yaw, lenght) in radian.
            To convert the angles to cycles, multiply them with VMath.DegToCyc.
            </summary>
            <param name="a"></param>
            <returns>Point in polar coordinates</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.QuaternionToEulerYawPitchRoll(VVVV.Utils.VMath.Vector4D,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts a quaternion into euler angles, assuming that the euler angle multiplication to create the quaternion was yaw*pitch*roll.
            All angles in radian.
            </summary>
            <param name="q">A quaternion, can be non normalized</param>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="roll"></param>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.QuaternionToEulerYawPitchRoll(VVVV.Utils.VMath.Vector4D)">
            <summary>
            Converts a quaternion into euler angles, assuming that the euler angle multiplication to create the quaternion was yaw*pitch*roll.
            All angles in radian.
            </summary>
            <param name="q">A quaternion, can be non normalized</param>
            <returns>3d-vector with x=pitch, y=yaw, z=roll</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Trilateration(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,System.Double,System.Double,System.Double,VVVV.Utils.VMath.Vector3D@,VVVV.Utils.VMath.Vector3D@)">
            <summary>
            Intersaction of 3 Spheres
            </summary>
            <param name="P1">Center sphere 1</param>
            <param name="P2">Center sphere 2</param>
            <param name="P3">Center sphere 3</param>
            <param name="r1">Radius sphere 1</param>
            <param name="r2">Radius sphere 2</param>
            <param name="r3">Radius sphere 3</param>
            <param name="S1">Intersection Point 1</param>
            <param name="S2">Intersection Point 2</param>
            <returns>Number of intersections</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix from 3 given values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>Translation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Translate(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Creates a translation matrix from a given 3d-vector
            </summary>
            <param name="v"></param>
            <returns>Translation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix from 3 given values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>Scaling matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Scale(VVVV.Utils.VMath.Vector3D)">
            <summary>
            Creates a scaling matrix from a given 3d-vector
            </summary>
            <param name="v"></param>
            <returns>Scaling matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RotateX(System.Double)">
            <summary>
            Creates a rotation matrix from a given angle around the x-axis
            </summary>
            <param name="rotX"></param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RotateY(System.Double)">
            <summary>
            Creates a rotation matrix from a given angle around the y-axis
            </summary>
            <param name="rotY"></param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.RotateZ(System.Double)">
            <summary>
            Creates a rotation matrix from a given angle around the z-axis
            </summary>
            <param name="rotZ"></param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a rotation matrix from 3 angles
            </summary>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="rotZ"></param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Rotate(VVVV.Utils.VMath.Vector3D)">
            <summary>
             Creates a rotation matrix from 3 angles given as 3d-vector
            </summary>
            <param name="rot"></param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Transform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a transform matrix from translation, scaling and rotation parameters
            Like the vvvv node Transform (3d)
            </summary>
            <param name="transX"></param>
            <param name="transY"></param>
            <param name="transZ"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="rotZ"></param>
            <returns>Transform matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Transform(VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D,VVVV.Utils.VMath.Vector3D)">
            <summary>
            Creates a transform matrix from translation, scaling and rotation parameters given as 3d-vectors
            Like the vvvv node Transform (3d Vector)
            </summary>
            <param name="trans"></param>
            <param name="scale"></param>
            <param name="rot"></param>
            <returns>Transform matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.PerspectiveLH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view.
            </summary>
            <param name="FOV">Camera angle in cycles, [0..0.5]</param>
            <param name="Near">Near Plane z</param>
            <param name="Far">Far Plane z</param>
            <param name="Aspect">Aspect Ratio</param>
            <returns>Projection matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.PerspectiveRH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a right-handed perspective projection matrix based on a field of view.
            </summary>
            <param name="FOV">Camera angle in cycles, [0..0.5]</param>
            <param name="Near">Near Plane z</param>
            <param name="Far">Far Plane z</param>
            <param name="Aspect">Aspect Ratio</param>
            <returns>Projection matrix</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Transpose(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Transpose a 4x4 matrix
            </summary>
            <param name="A"></param>
            <returns>Transpose of input matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Inverse(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Optimized 4x4 matrix inversion using cramer's rule, found in the game engine http://www.ogre3d.org
            Note that the unary ! operator of Matrix4x4 does the same
            
            Code takes about 1,8ns to execute on intel core2 duo 2Ghz, the intel reference
            implementation (not assembly optimized) was about 2,2ns.
            http://www.intel.com/design/pentiumiii/sml/24504301.pdf
            </summary>
            <param name="A"></param>
            <returns>Inverse matrix of input matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.Det(VVVV.Utils.VMath.Matrix4x4)">
            <summary>
            Calculates the determinat of a 4x4 matrix
            Note that the unary ~ operator of Matrix4x4 does the same
            </summary>
            <param name="A"></param>
            <returns>Determinat of input matrix A</returns>
        </member>
        <member name="M:VVVV.Utils.VMath.VMath.BilerpMatrix(VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D,VVVV.Utils.VMath.Vector4D)">
            <summary>
            Builds a matrix that interpolates 4d-vectors like a 2d bilinear interpolation in x and y direction
            
            Should be used to transform 4d vectors with interpolation foacors in the 4d-form (x, y, x*y, 1) 
            </summary>
            <param name="P1">Upper left vector</param>
            <param name="P2">Upper right vector</param>
            <param name="P3">Lower right vector</param>
            <param name="P4">Lower left vector</param>
            <returns>Linear interpolation matrix, can be used to interpolate 4d vectors with interpolation factors in the 4d-form (x, y, x*y, 1)</returns>
        </member>
        <member name="T:VVVV.Utils.Network.UDPReceivedEventArgs">
            <summary>
            UDP message received event argument
            </summary>
        </member>
        <member name="P:VVVV.Utils.Network.UDPReceivedEventArgs.RemoteSender">
            <summary>
            The remote sender IPEndPoint
            </summary>
        </member>
        <member name="P:VVVV.Utils.Network.UDPReceivedEventArgs.Data">
            <summary>
            The incoming data
            </summary>
        </member>
        <member name="T:VVVV.Utils.Network.UDPServer">
            <summary>
            Class to handle UDP connections
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.UDPServer.#ctor(System.Int32)">
            <summary>
            Create the UDP server
            </summary>
            <param name="port">The listening port</param>
        </member>
        <member name="M:VVVV.Utils.Network.UDPServer.Start">
            <summary>
            Starts the listening callback loop on the configurated port
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.UDPServer.Stop">
            <summary>
            Stop the listening callback loop
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.UDPServer.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Send UPD data
            </summary>
            <param name="data">The bytes to send</param>
            <param name="receiver">The remote receiver</param>
        </member>
        <member name="M:VVVV.Utils.Network.UDPServer.Close">
            <summary>
            Close socket
            </summary>
        </member>
        <member name="E:VVVV.Utils.Network.UDPServer.MessageReceived">
            <summary>
            This event is rised on incoming UPD data
            </summary>
        </member>
        <member name="P:VVVV.Utils.Network.UDPServer.Port">
            <summary>
            Set port and restart server
            </summary>
        </member>
        <member name="T:VVVV.Utils.Network.INetworkTimeSync">
            <summary>
            Common interface for network time server and client
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.INetworkTimeSync.Start">
            <summary>
            Start serving or requesting time data
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.INetworkTimeSync.SetTime(System.Double)">
            <summary>
            If on server, this sets the time to a given value
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:VVVV.Utils.Network.INetworkTimeSync.ElapsedSeconds">
            <summary>
            The elapsed seconds since the time server was started.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Network.UDPTimeServer">
            <summary>
            UDP Time server
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.UDPTimeServer.#ctor(System.Int32)">
            <summary>
            Create the UDP server
            </summary>
            <param name="port">The listening port</param>
        </member>
        <member name="M:VVVV.Utils.Network.UDPTimeServer.SetTime(System.Double)">
            <summary>
            Reset time
            </summary>
            <param name="time">Optionally set the time to given value</param>
        </member>
        <member name="P:VVVV.Utils.Network.UDPTimeServer.ElapsedSeconds">
            <summary>
            The elapsed time in seconds.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Network.UDPTimeServer.Offset">
            <summary>
            Clock offset
            </summary>
        </member>
        <member name="M:VVVV.Utils.Network.UDPTimeClient.#ctor(System.String,System.Int32)">
            <summary>
            Create UDP time client
            </summary>
            <param name="serverIP">Server IP</param>
            <param name="port">Server port (internal listening port is set to server port+1)</param>
        </member>
        <member name="P:VVVV.Utils.Network.UDPTimeClient.Port">
            <summary>
            Set port of time server (internal listening port is set to server port+1)
            </summary>
        </member>
        <member name="P:VVVV.Utils.Network.UDPTimeClient.IP">
            <summary>
            Set IP if time server
            </summary>
        </member>
        <member name="T:VVVV.Utils.OSC.OSCBundle">
            <summary>
            OSCBundle
            </summary>
        </member>
        <member name="T:VVVV.Utils.OSC.OSCPacket">
            <summary>
            OSCPacket
            </summary>
        </member>
        <member name="T:VVVV.Utils.OSC.OSCMessage">
            <summary>
            OSCMessage
            
            Contains an address, a comma followed by one or more type identifiers. then the data itself follows in binary encoding.
            </summary>
        </member>
        <member name="T:VVVV.Utils.OSC.OSCReceiver">
            <summary>
            OSCReceiver
            </summary>
        </member>
        <member name="T:VVVV.Utils.OSC.OSCTransmitter">
            <summary>
            OSCTransmitter
            </summary>
        </member>
        <member name="T:VVVV.Utils.PathUtils">
            <summary>
            Utility methods missing in the System.IO.Path class.
            </summary>
        </member>
        <member name="M:VVVV.Utils.PathUtils.MakeRelativePath(System.String,System.String)">
            <summary>
            Returns the relative path to reach toPath from fromPath.
            </summary>
        </member>
        <member name="M:VVVV.Utils.PathUtils.IsSubDir(System.String,System.String)">
            <summary>
            Whether or not dir2 is a subdirectory of dir1.
            </summary>
            <remarks>http://stackoverflow.com/questions/5617320/given-full-path-check-if-path-is-subdirectory-of-some-other-path-or-otherwise</remarks>
        </member>
        <member name="M:VVVV.Utils.PathUtils.IsSubDir(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Whether or not dir2 is a subdirectory of dir1.
            </summary>
            <remarks>http://stackoverflow.com/questions/5617320/given-full-path-check-if-path-is-subdirectory-of-some-other-path-or-otherwise</remarks>
        </member>
        <member name="M:VVVV.Utils.PathUtils.IsSubOrSameDir(System.String,System.String)">
            <summary>
            Whether or not dir2 is a subdirectory of dir1 or they are the same.
            </summary>
            <remarks>http://stackoverflow.com/questions/5617320/given-full-path-check-if-path-is-subdirectory-of-some-other-path-or-otherwise</remarks>
        </member>
        <member name="M:VVVV.Utils.PathUtils.IsSubOrSameDir(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Whether or not dir2 is a subdirectory of dir1 or they are the same.
            </summary>
            <remarks>http://stackoverflow.com/questions/5617320/given-full-path-check-if-path-is-subdirectory-of-some-other-path-or-otherwise</remarks>
        </member>
        <member name="M:VVVV.Utils.Reflection.TypeExtensions.GetCSharpName(System.Type)">
            <summary>
            Generates a CSharp like type name string.
            </summary>
            <param name="type">A .Net Type</param>
            <returns>Type name as one would write it in CSharp</returns>
        </member>
        <member name="M:VVVV.Utils.Reflection.TypeExtensions.GetCSharpName(System.Type,System.Boolean)">
            <summary>
            Generates a CSharp like type name string.
            </summary>
            <param name="type">A .Net Type</param>
            <param name="includeNamespace">If true, the return string comes with namespace prefix.</param>
            <returns>Type name as one would write it in CSharp</returns>
        </member>
        <member name="T:VVVV.Utils.SharedMemory.SharedMemoryCreationFlag">
            <summary>
            Enum for specifying whether a new shared memory 
            segment should be created or just attach to an existing one
            </summary>
        </member>
        <member name="T:VVVV.Utils.SharedMemory.Segment">
            <summary>
            This class wraps Win32 shared memory.
            </summary>
            
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.Lock">
            <summary>
            Provides a cross processs lock on the named mutex
            </summary>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.Unlock">
            <summary>
            Releases to cross process lock on the named mutex
            </summary>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.GetData">
            <summary>
            Returns the object graph stored in the shared memory segment
            </summary>
            <returns>System.Object - root of object graph</returns>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.SetData(System.Object)">
            <summary>
            Stores serializable object graph in shared memory
            </summary>
            <param name="obj">System.Object root of object graph to be stored in shared memory</param>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.Finalize">
            <summary>
            Finalizer to free up shared memory segment native handle
            </summary>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.Dispose">
            <summary>
            IDisposable.Dispose allow timely clean up and removed the need for finalization
            </summary>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.Dispose(System.Boolean)">
            <summary>
            Common clean up method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.CopyStreamToSharedMemory(System.IO.Stream)">
            <summary>
            Copies stream to shared memory segment using unsafe pointers
            </summary>
            <param name="stream"> System.IO.Stream - data to be copied to shared memory</param>
        </member>
        <member name="M:VVVV.Utils.SharedMemory.Segment.CopySharedMemoryToStream(System.IO.Stream)">
            <summary>
            Copies shared memory data to passed stream using unsafe pointers
            </summary>
            <param name="stream">System.IO.Stream - stream to receive data</param>
        </member>
        <member name="P:VVVV.Utils.SharedMemory.Segment.WaitHandle">
            <summary>
            Provides access to the cross process waithandle
            </summary>
        </member>
        <member name="T:VVVV.Utils.SharedMemory.Win32Native">
            <summary>
            Summary description for Win32Native.
            </summary>
            
        </member>
        <member name="P:VVVV.SkeletonInterfaces.IJoint.Id">
            <summary>
            The index in the skinning list. Set to -1 if the joint doesn't take part in skinning.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IStreamWriter`1">
            <summary>
            Interface which provides the ability to write to an output stream.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IStreamer">
            <summary>
            Base interface for all stream readers and writers.
            It provides the ability to test whether or not the end
            of the stream is reached or to seek in the stream.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Streams.IStreamer.Eos">
            <summary>
            Gets whether or not the end of the stream is reached.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Streams.IStreamer.Position">
            <summary>
            Gets or sets the position of the reader or writer.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Streams.IStreamer.Length">
            <summary>
            Gets the length of the stream this streamer reads from or writes to.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.IStreamWriter`1.Write(`0,System.Int32)">
            <summary>
            Writes an item to the current position in the stream and 
            advances the position within the stream stride many times.
            </summary>
            <param name="value">The item to write to the stream.</param>
            <param name="stride">The stride by which to advance the position.</param>
        </member>
        <member name="M:VVVV.Utils.Streams.IStreamWriter`1.Write(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a sequence of items to the current stream and advances 
            the current position within this stream by the number of items written.
            Use the stride parameter to control advancing of the position after one item has been written.
            </summary>
            <param name="buffer">The buffer to copy from.</param>
            <param name="index">The zero-based offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="length">The number of items to be written to the current stream.</param>
            <param name="stride">The stride by which the position is advanced after writing one item.</param>
            <returns>
            The total number of items written to the stream. 
            This can be less than the number of items requested if end of the stream has been reached.
            </returns>
        </member>
        <member name="M:VVVV.Utils.Streams.IStreamWriter`1.Reset">
            <summary>
            Resets the writer by setting its position back to the beginning of the stream.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IInStream`1">
            <summary>
            Defines an input stream. Input streams can be read from by
            either retrieving a <see cref="T:VVVV.Utils.Streams.IStreamReader`1"/> or
            or by iterating it with <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IInStream">
            <summary>
            Base interface for all input streams.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IStream">
            <summary>
            Interface which provides the ability to retrieve the length
            of a stream. It acts as the base interface for all stream
            implementations.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Streams.IStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.ISynchronizable">
            <summary>
            Interface which provides the ability to synchronize a stream
            with its backing data source.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.ISynchronizable.Sync">
            <summary>
            Synchronizes this object with the backing data source.
            </summary>
            <returns>
            Whether or not the data changed.
            Note: Most implementations will return true as the
            cost to check if the data changed might be too high.
            </returns>
        </member>
        <member name="P:VVVV.Utils.Streams.ISynchronizable.IsChanged">
            <summary>
            Whether or not the data changed during last synchronization.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.IInStream`1.GetReader">
            <summary>
            Gets a <see cref="T:VVVV.Utils.Streams.IStreamReader`1"/> used to read from this input stream.
            </summary>
            <returns>A <see cref="T:VVVV.Utils.Streams.IStreamReader`1"/> to read from this stream.</returns>
        </member>
        <member name="T:VVVV.Utils.Streams.IStreamReader`1">
            <summary>
            Interface which provides the ability to read from an input stream.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.IStreamReader`1.Read(System.Int32)">
            <summary>
            Reads one item from the stream and advances the position within the
            stream stride many times.
            </summary>
            <param name="stride">The stride by which to advance the position.</param>
            <returns>The item at the current position.</returns>
        </member>
        <member name="M:VVVV.Utils.Streams.IStreamReader`1.Read(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads a sequence of items from the current stream and advances the position 
            within the stream by the number of items read.
            Use the stride parameter to control advancing of the position after one item has been read.
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The zero-based offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="length">The maximum number of items to be read from the current stream.</param>
            <param name="stride">The stride by which the position is advanced after reading one item.</param>
            <returns>
            The total number of items read into the buffer. 
            This can be less than the number of items requested if that many items are not currently available, 
            or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="T:VVVV.Utils.EllipsisFormat">
            <summary>
            Specifies ellipsis format and alignment.
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.None">
            <summary>
            Text is not modified.
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.End">
            <summary>
            Text is trimmed at the end of the string. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.Start">
            <summary>
            Text is trimmed at the begining of the string. An ellipsis (...) is drawn in place of remaining text. 
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.Middle">
            <summary>
            Text is trimmed in the middle of the string. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.Path">
            <summary>
            Preserve as much as possible of the drive and filename information. Must be combined with alignment information.
            </summary>
        </member>
        <member name="F:VVVV.Utils.EllipsisFormat.Word">
            <summary>
            Text is trimmed at a word boundary. Must be combined with alignment information.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Ellipsis.EllipsisChars">
            <summary>
            String used as a place holder for trimmed text.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Ellipsis.Compact(System.String,System.Int32,System.Drawing.Font,VVVV.Utils.EllipsisFormat)">
            <summary>
            Truncates a text string to fit within a given control width by replacing trimmed text with ellipses. 
            </summary>
            <param name="text">String to be trimmed.</param>
            <param name="width">text must fit within width.</param>
            <param name="font">font is used to measure the text string.</param>
            <param name="options">Format and alignment of ellipsis.</param>
            <returns>This function returns text trimmed to the specified witdh.</returns>
        </member>
        <member name="T:VVVV.Utils.FontExtentions">
            <summary>
            Calculate exact sizes of strings
            </summary>
        </member>
        <member name="M:VVVV.Utils.FontExtentions.GetAscentPixels(System.Drawing.Font)">
            <summary>
            Calculates the ascent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.FontExtentions.GetDescentPixels(System.Drawing.Font)">
            <summary>
            Calculates the descent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.FontExtentions.GetLineSpacingPixels(System.Drawing.Font)">
            <summary>
            Calculates the distance from base line to base line of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.FontExtentions.GetCellHeightPixels(System.Drawing.Font)">
            <summary>
            Calculates the maximum height in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.ArrayExtensions.Init``1(``0[],``0)">
            <summary>
            Initializes the array with the defaultValue.
            </summary>
            <param name="array">The array to initialize.</param>
            <param name="defaultVaue">The value to initialize the array with.</param>
        </member>
        <member name="M:VVVV.Utils.ArrayExtensions.Fill``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Fills the array with the defaultValue from index to index + length.
            </summary>
            <param name="array">The array to fill.</param>
            <param name="index">The index into the array where the fill operation starts.</param>
            <param name="length">The fill operation ends at index + length.</param>
            <param name="defaultVaue">The value to fill the array with.</param>
        </member>
        <member name="M:VVVV.Utils.ArrayExtensions.Replicate``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Replicates the values between startIndex and endIndex.
            </summary>
            <param name="array">The array to do the replication on.</param>
            <param name="startIndex">Defines from where to begin the replication.</param>
            <param name="endIndex">Defines where to end the replication.</param>
            <param name="times">Defines the number of replications of the values between startIndex and endIndex.</param>
        </member>
        <member name="M:VVVV.Utils.ArrayExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps the elements at positions i and j.
            </summary>
            <param name="array">The array to do the swap on.</param>
            <param name="i">The i'th element.</param>
            <param name="j">The j'th element.</param>
        </member>
        <member name="M:VVVV.Utils.ArrayExtensions.ContentEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares the content of the two arrays for equality.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True if a and b contain the same data otherwise false.</returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetBounds(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Returns the bounds of the given point cloud.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetBounds(System.Collections.Generic.IEnumerable{System.Drawing.RectangleF})">
            <summary>
            Returns the bounds of the given rectangle cloud.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Area(System.Drawing.SizeF)">
            <summary>
            Returns the area.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetCenter(System.Drawing.RectangleF)">
            <summary>
            Returns the center of this RectangleF.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetRectangleForCenterAndSize(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Returns a rectangle for given center position and size.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.ToPoint(System.Drawing.PointF)">
            <summary>
            Returns a <see cref="T:System.Drawing.Point">Point</see> by casting the float components to integer.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Plus(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Translates a given <see cref="T:System.Drawing.PointF">p1</see> by a specified <see cref="T:System.Drawing.PointF">p2</see>.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Minus(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Translates a given <see cref="T:System.Drawing.PointF">p1</see> by a specified <see cref="T:System.Drawing.PointF">p2</see>.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetDistanceTo(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns the distance to another point.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Normalize(System.Drawing.PointF)">
            <summary>
            Normalizes the length
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetDistanceTo(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Returns the distance to another point.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.TransformPoint(System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
            <summary>
            Applies the transformation to a PointF
            </summary>
            <param name="t">A Matrix</param>
            <param name="p">The point to transform by the matrix t</param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.TransformRectangle(System.Drawing.Drawing2D.Matrix,System.Drawing.RectangleF)">
            <summary>
            Applies the geometric transform represented by this Matrix to the
            given rectangle.
            </summary>
            <param name="t">A Matrix</param>
            <param name="rect">The rectangle to transform.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="T:VVVV.Utils.EventArgs`1">
            <summary>
            Generic event args
            </summary>
        </member>
        <member name="T:VVVV.Utils.EventArgsMutable`1">
            <summary>
            Mutable generic event args 
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToUpperFirstInvariant(System.String)">
            <summary>
            Converts the first letter of a string to upper case, using the casing rules of invariant culture.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:VVVV.Utils.Win32.Extensions.LoWord(System.UIntPtr)">
            <summary>
            Extracts lower 16-bit word.
            See: http://stackoverflow.com/questions/7913325/win-api-in-c-get-hi-and-low-word-from-intptr
            </summary>
        </member>
        <member name="M:VVVV.Utils.Win32.Extensions.HiWord(System.UIntPtr)">
            <summary>
            Extracts higher 16-bit word.
            See: http://stackoverflow.com/questions/7913325/win-api-in-c-get-hi-and-low-word-from-intptr
            </summary>
        </member>
        <member name="M:VVVV.Utils.Win32.Extensions.LoWord(System.IntPtr)">
            <summary>
            Extracts lower 16-bit word.
            See: http://stackoverflow.com/questions/7913325/win-api-in-c-get-hi-and-low-word-from-intptr
            </summary>
        </member>
        <member name="M:VVVV.Utils.Win32.Extensions.HiWord(System.IntPtr)">
            <summary>
            Extracts higher 16-bit word.
            See: http://stackoverflow.com/questions/7913325/win-api-in-c-get-hi-and-low-word-from-intptr
            </summary>
        </member>
        <member name="M:VVVV.Utils.Win32.Extensions.ToChar(System.Windows.Forms.Keys,System.Boolean,System.Windows.Forms.InputLanguage,System.Boolean)">
            <summary>
            Virtual keycode to character translation.
            </summary>
            <remarks>http://stackoverflow.com/questions/6214326/translate-keys-to-char</remarks>
        </member>
        <member name="T:VVVV.Utils.Streams.CyclicStreamReader`1">
            <summary>
            A stream reader which reads a stream in a cyclic fashion.
            It will therefor never go into an end of stream state.
            Exceptions to this rule is if the stream is empty.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IFlushable">
            <summary>
            Interface which provides the ability to flush all buffered data
            of a stream to its backing data sink.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.IFlushable.Flush(System.Boolean)">
            <summary>
            Flushes all buffered data to the backing data sink.
            </summary>
            <param name="force">
            Whether or not to force the flush. Many implementations keep a changed flag
            internally to reduce unnecessary method calls and copy operations.
            Forcing a flush should circumvent those internal flags and do the copy no 
            matter what.
            </param>
        </member>
        <member name="T:VVVV.Utils.Streams.IOutStream">
            <summary>
            Base interface for all output streams. It provides the ability
            to set the length of an output stream.
            </summary>
        </member>
        <member name="P:VVVV.Utils.Streams.IOutStream.Length">
            <summary>
            Gets or sets the length of the output stream.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Streams.IOutStream`1">
            <summary>
            Defines an output stream. Output streams can be written to by
            by retrieving a <see cref="T:VVVV.Utils.Streams.IStreamWriter`1"/>.
            </summary>
        </member>
        <member name="M:VVVV.Utils.Streams.IOutStream`1.GetWriter">
            <summary>
            Gets a <see cref="T:VVVV.Utils.Streams.IStreamWriter`1"/> which can be used to write
            to this output stream.
            </summary>
            <returns>A <see cref="T:VVVV.Utils.Streams.IStreamWriter`1"/> to write to this stream.</returns>
        </member>
        <member name="M:VVVV.Utils.Streams.StreamReaderExtensions.Read``1(VVVV.Utils.Streams.IStreamReader{``0},System.ArraySegment{``0},System.Int32)">
            <summary>
            Reads a sequence of items from the current stream and advances the position 
            within the stream by the number of items read.
            Use the stride parameter to control advancing of the position after one item has been read.
            </summary>
            <param name="reader">The reader to use from reading.</param>
            <param name="segment">The array segment to read into.</param>
            <param name="stride">The stride by which the position is advanced after reading one item.</param>
            <returns>
            The total number of items read into the buffer. 
            This can be less than the number of items requested if that many items are not currently available, 
            or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:VVVV.Utils.Streams.StreamWriterExtensions.Write``1(VVVV.Utils.Streams.IStreamWriter{``0},System.ArraySegment{``0},System.Int32)">
            <summary>
            Writes a sequence of items to the current stream and advances 
            the current position within this stream by the number of items written.
            Use the stride parameter to control advancing of the position after one item has been written.
            </summary>
            <param name="writer">The writer to use for writing.</param>
            <param name="segment">The array segment to copy from.</param>
            <param name="stride">The stride by which the position is advanced after writing one item.</param>
            <returns>
            The total number of items written to the stream. 
            This can be less than the number of items requested if end of the stream has been reached.
            </returns>
        </member>
        <member name="T:VVVV.Utils.Streams.MemoryIOStream`1">
            <summary>
            Implemention of <see cref="T:VVVV.Utils.Streams.IIOStream`1"/> using an array as storage.
            Useful as wrapper if a stream is accessed randomly.
            </summary>
        </member>
        <member name="T:VVVV.Utils.Win32.WM">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.TOUCH">
            <summary>
            Notifies the window when one or more touch points, such as a finger or pen, touches a touch-sensitive digitizer surface.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:VVVV.Utils.Win32.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
    </members>
</doc>
